/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const LCD_COLUMNS: u32 = 400;
pub const LCD_ROWS: u32 = 240;
pub const LCD_ROWSIZE: u32 = 52;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct LCDRect {
    pub left: ctypes::c_int,
    pub right: ctypes::c_int,
    pub top: ctypes::c_int,
    pub bottom: ctypes::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LCDRect"][::core::mem::size_of::<LCDRect>() - 16usize];
    ["Alignment of LCDRect"][::core::mem::align_of::<LCDRect>() - 4usize];
    ["Offset of field: LCDRect::left"][::core::mem::offset_of!(LCDRect, left) - 0usize];
    ["Offset of field: LCDRect::right"][::core::mem::offset_of!(LCDRect, right) - 4usize];
    ["Offset of field: LCDRect::top"][::core::mem::offset_of!(LCDRect, top) - 8usize];
    ["Offset of field: LCDRect::bottom"][::core::mem::offset_of!(LCDRect, bottom) - 12usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LCDBitmapDrawMode {
    kDrawModeCopy = 0,
    kDrawModeWhiteTransparent = 1,
    kDrawModeBlackTransparent = 2,
    kDrawModeFillWhite = 3,
    kDrawModeFillBlack = 4,
    kDrawModeXOR = 5,
    kDrawModeNXOR = 6,
    kDrawModeInverted = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LCDBitmapFlip {
    kBitmapUnflipped = 0,
    kBitmapFlippedX = 1,
    kBitmapFlippedY = 2,
    kBitmapFlippedXY = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LCDSolidColor {
    kColorBlack = 0,
    kColorWhite = 1,
    kColorClear = 2,
    kColorXOR = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LCDLineCapStyle {
    kLineCapStyleButt = 0,
    kLineCapStyleSquare = 1,
    kLineCapStyleRound = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDStringEncoding {
    kASCIIEncoding = 0,
    kUTF8Encoding = 1,
    k16BitLEEncoding = 2,
}
pub type LCDPattern = [u8; 16usize];
pub type LCDColor = usize;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LCDPolygonFillRule {
    kPolygonFillNonZero = 0,
    kPolygonFillEvenOdd = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDTextWrappingMode {
    kWrapClip = 0,
    kWrapCharacter = 1,
    kWrapWord = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDTextAlignment {
    kAlignTextLeft = 0,
    kAlignTextCenter = 1,
    kAlignTextRight = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDBitmap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDBitmapTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFont {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontPage {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDFontGlyph {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDVideoPlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_video {
    pub loadVideo: ::core::option::Option<
        unsafe extern "C" fn(path: *const ctypes::c_char) -> *mut LCDVideoPlayer,
    >,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer)>,
    pub setContext: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer, context: *mut LCDBitmap) -> ctypes::c_int,
    >,
    pub useScreenContext: ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer)>,
    pub renderFrame: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer, n: ctypes::c_int) -> ctypes::c_int,
    >,
    pub getError: ::core::option::Option<
        unsafe extern "C" fn(p: *mut LCDVideoPlayer) -> *const ctypes::c_char,
    >,
    pub getInfo: ::core::option::Option<
        unsafe extern "C" fn(
            p: *mut LCDVideoPlayer,
            outWidth: *mut ctypes::c_int,
            outHeight: *mut ctypes::c_int,
            outFrameRate: *mut f32,
            outFrameCount: *mut ctypes::c_int,
            outCurrentFrame: *mut ctypes::c_int,
        ),
    >,
    pub getContext:
        ::core::option::Option<unsafe extern "C" fn(p: *mut LCDVideoPlayer) -> *mut LCDBitmap>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_video"][::core::mem::size_of::<playdate_video>() - 64usize];
    ["Alignment of playdate_video"][::core::mem::align_of::<playdate_video>() - 8usize];
    ["Offset of field: playdate_video::loadVideo"]
        [::core::mem::offset_of!(playdate_video, loadVideo) - 0usize];
    ["Offset of field: playdate_video::freePlayer"]
        [::core::mem::offset_of!(playdate_video, freePlayer) - 8usize];
    ["Offset of field: playdate_video::setContext"]
        [::core::mem::offset_of!(playdate_video, setContext) - 16usize];
    ["Offset of field: playdate_video::useScreenContext"]
        [::core::mem::offset_of!(playdate_video, useScreenContext) - 24usize];
    ["Offset of field: playdate_video::renderFrame"]
        [::core::mem::offset_of!(playdate_video, renderFrame) - 32usize];
    ["Offset of field: playdate_video::getError"]
        [::core::mem::offset_of!(playdate_video, getError) - 40usize];
    ["Offset of field: playdate_video::getInfo"]
        [::core::mem::offset_of!(playdate_video, getInfo) - 48usize];
    ["Offset of field: playdate_video::getContext"]
        [::core::mem::offset_of!(playdate_video, getContext) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct playdate_graphics {
    pub video: *const playdate_video,
    pub clear: ::core::option::Option<unsafe extern "C" fn(color: LCDColor)>,
    pub setBackgroundColor: ::core::option::Option<unsafe extern "C" fn(color: LCDSolidColor)>,
    pub setStencil: ::core::option::Option<unsafe extern "C" fn(stencil: *mut LCDBitmap)>,
    pub setDrawMode:
        ::core::option::Option<unsafe extern "C" fn(mode: LCDBitmapDrawMode) -> LCDBitmapDrawMode>,
    pub setDrawOffset:
        ::core::option::Option<unsafe extern "C" fn(dx: ctypes::c_int, dy: ctypes::c_int)>,
    pub setClipRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
        ),
    >,
    pub clearClipRect: ::core::option::Option<unsafe extern "C" fn()>,
    pub setLineCapStyle: ::core::option::Option<unsafe extern "C" fn(endCapStyle: LCDLineCapStyle)>,
    pub setFont: ::core::option::Option<unsafe extern "C" fn(font: *mut LCDFont)>,
    pub setTextTracking: ::core::option::Option<unsafe extern "C" fn(tracking: ctypes::c_int)>,
    pub pushContext: ::core::option::Option<unsafe extern "C" fn(target: *mut LCDBitmap)>,
    pub popContext: ::core::option::Option<unsafe extern "C" fn()>,
    pub drawBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
            flip: LCDBitmapFlip,
        ),
    >,
    pub tileBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            flip: LCDBitmapFlip,
        ),
    >,
    pub drawLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: ctypes::c_int,
            y1: ctypes::c_int,
            x2: ctypes::c_int,
            y2: ctypes::c_int,
            width: ctypes::c_int,
            color: LCDColor,
        ),
    >,
    pub fillTriangle: ::core::option::Option<
        unsafe extern "C" fn(
            x1: ctypes::c_int,
            y1: ctypes::c_int,
            x2: ctypes::c_int,
            y2: ctypes::c_int,
            x3: ctypes::c_int,
            y3: ctypes::c_int,
            color: LCDColor,
        ),
    >,
    pub drawRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            color: LCDColor,
        ),
    >,
    pub fillRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            color: LCDColor,
        ),
    >,
    pub drawEllipse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            lineWidth: ctypes::c_int,
            startAngle: f32,
            endAngle: f32,
            color: LCDColor,
        ),
    >,
    pub fillEllipse: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            startAngle: f32,
            endAngle: f32,
            color: LCDColor,
        ),
    >,
    pub drawScaledBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
            xscale: f32,
            yscale: f32,
        ),
    >,
    pub drawText: ::core::option::Option<
        unsafe extern "C" fn(
            text: *const ctypes::c_void,
            len: usize,
            encoding: PDStringEncoding,
            x: ctypes::c_int,
            y: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub newBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            width: ctypes::c_int,
            height: ctypes::c_int,
            bgcolor: LCDColor,
        ) -> *mut LCDBitmap,
    >,
    pub freeBitmap: ::core::option::Option<unsafe extern "C" fn(arg1: *mut LCDBitmap)>,
    pub loadBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            outerr: *mut *const ctypes::c_char,
        ) -> *mut LCDBitmap,
    >,
    pub copyBitmap:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap) -> *mut LCDBitmap>,
    pub loadIntoBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            bitmap: *mut LCDBitmap,
            outerr: *mut *const ctypes::c_char,
        ),
    >,
    pub getBitmapData: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            width: *mut ctypes::c_int,
            height: *mut ctypes::c_int,
            rowbytes: *mut ctypes::c_int,
            mask: *mut *mut u8,
            data: *mut *mut u8,
        ),
    >,
    pub clearBitmap:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap, bgcolor: LCDColor)>,
    pub rotatedBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            rotation: f32,
            xscale: f32,
            yscale: f32,
            allocedSize: *mut ctypes::c_int,
        ) -> *mut LCDBitmap,
    >,
    pub newBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            count: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
        ) -> *mut LCDBitmapTable,
    >,
    pub freeBitmapTable: ::core::option::Option<unsafe extern "C" fn(table: *mut LCDBitmapTable)>,
    pub loadBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            outerr: *mut *const ctypes::c_char,
        ) -> *mut LCDBitmapTable,
    >,
    pub loadIntoBitmapTable: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            table: *mut LCDBitmapTable,
            outerr: *mut *const ctypes::c_char,
        ),
    >,
    pub getTableBitmap: ::core::option::Option<
        unsafe extern "C" fn(table: *mut LCDBitmapTable, idx: ctypes::c_int) -> *mut LCDBitmap,
    >,
    pub loadFont: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            outErr: *mut *const ctypes::c_char,
        ) -> *mut LCDFont,
    >,
    pub getFontPage: ::core::option::Option<
        unsafe extern "C" fn(font: *mut LCDFont, c: u32) -> *mut LCDFontPage,
    >,
    pub getPageGlyph: ::core::option::Option<
        unsafe extern "C" fn(
            page: *mut LCDFontPage,
            c: u32,
            bitmap: *mut *mut LCDBitmap,
            advance: *mut ctypes::c_int,
        ) -> *mut LCDFontGlyph,
    >,
    pub getGlyphKerning: ::core::option::Option<
        unsafe extern "C" fn(
            glyph: *mut LCDFontGlyph,
            glyphcode: u32,
            nextcode: u32,
        ) -> ctypes::c_int,
    >,
    pub getTextWidth: ::core::option::Option<
        unsafe extern "C" fn(
            font: *mut LCDFont,
            text: *const ctypes::c_void,
            len: usize,
            encoding: PDStringEncoding,
            tracking: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub getFrame: ::core::option::Option<unsafe extern "C" fn() -> *mut u8>,
    pub getDisplayFrame: ::core::option::Option<unsafe extern "C" fn() -> *mut u8>,
    pub getDebugBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub copyFrameBufferBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub markUpdatedRows:
        ::core::option::Option<unsafe extern "C" fn(start: ctypes::c_int, end: ctypes::c_int)>,
    pub display: ::core::option::Option<unsafe extern "C" fn()>,
    pub setColorToPattern: ::core::option::Option<
        unsafe extern "C" fn(
            color: *mut LCDColor,
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
        ),
    >,
    pub checkMaskCollision: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap1: *mut LCDBitmap,
            x1: ctypes::c_int,
            y1: ctypes::c_int,
            flip1: LCDBitmapFlip,
            bitmap2: *mut LCDBitmap,
            x2: ctypes::c_int,
            y2: ctypes::c_int,
            flip2: LCDBitmapFlip,
            rect: LCDRect,
        ) -> ctypes::c_int,
    >,
    pub setScreenClipRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
        ),
    >,
    pub fillPolygon: ::core::option::Option<
        unsafe extern "C" fn(
            nPoints: ctypes::c_int,
            coords: *mut ctypes::c_int,
            color: LCDColor,
            fillrule: LCDPolygonFillRule,
        ),
    >,
    pub getFontHeight: ::core::option::Option<unsafe extern "C" fn(font: *mut LCDFont) -> u8>,
    pub getDisplayBufferBitmap: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDBitmap>,
    pub drawRotatedBitmap: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
            rotation: f32,
            centerx: f32,
            centery: f32,
            xscale: f32,
            yscale: f32,
        ),
    >,
    pub setTextLeading:
        ::core::option::Option<unsafe extern "C" fn(lineHeightAdustment: ctypes::c_int)>,
    pub setBitmapMask: ::core::option::Option<
        unsafe extern "C" fn(bitmap: *mut LCDBitmap, mask: *mut LCDBitmap) -> ctypes::c_int,
    >,
    pub getBitmapMask:
        ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap) -> *mut LCDBitmap>,
    pub setStencilImage:
        ::core::option::Option<unsafe extern "C" fn(stencil: *mut LCDBitmap, tile: ctypes::c_int)>,
    pub makeFontFromData: ::core::option::Option<
        unsafe extern "C" fn(data: *mut LCDFontData, wide: ctypes::c_int) -> *mut LCDFont,
    >,
    pub getTextTracking: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub setPixel: ::core::option::Option<
        unsafe extern "C" fn(x: ctypes::c_int, y: ctypes::c_int, c: LCDColor),
    >,
    pub getBitmapPixel: ::core::option::Option<
        unsafe extern "C" fn(
            bitmap: *mut LCDBitmap,
            x: ctypes::c_int,
            y: ctypes::c_int,
        ) -> LCDSolidColor,
    >,
    pub getBitmapTableInfo: ::core::option::Option<
        unsafe extern "C" fn(
            table: *mut LCDBitmapTable,
            count: *mut ctypes::c_int,
            width: *mut ctypes::c_int,
        ),
    >,
    pub drawTextInRect: ::core::option::Option<
        unsafe extern "C" fn(
            text: *const ctypes::c_void,
            len: usize,
            encoding: PDStringEncoding,
            x: ctypes::c_int,
            y: ctypes::c_int,
            width: ctypes::c_int,
            height: ctypes::c_int,
            wrap: PDTextWrappingMode,
            align: PDTextAlignment,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_graphics"][::core::mem::size_of::<playdate_graphics>() - 512usize];
    ["Alignment of playdate_graphics"][::core::mem::align_of::<playdate_graphics>() - 8usize];
    ["Offset of field: playdate_graphics::video"]
        [::core::mem::offset_of!(playdate_graphics, video) - 0usize];
    ["Offset of field: playdate_graphics::clear"]
        [::core::mem::offset_of!(playdate_graphics, clear) - 8usize];
    ["Offset of field: playdate_graphics::setBackgroundColor"]
        [::core::mem::offset_of!(playdate_graphics, setBackgroundColor) - 16usize];
    ["Offset of field: playdate_graphics::setStencil"]
        [::core::mem::offset_of!(playdate_graphics, setStencil) - 24usize];
    ["Offset of field: playdate_graphics::setDrawMode"]
        [::core::mem::offset_of!(playdate_graphics, setDrawMode) - 32usize];
    ["Offset of field: playdate_graphics::setDrawOffset"]
        [::core::mem::offset_of!(playdate_graphics, setDrawOffset) - 40usize];
    ["Offset of field: playdate_graphics::setClipRect"]
        [::core::mem::offset_of!(playdate_graphics, setClipRect) - 48usize];
    ["Offset of field: playdate_graphics::clearClipRect"]
        [::core::mem::offset_of!(playdate_graphics, clearClipRect) - 56usize];
    ["Offset of field: playdate_graphics::setLineCapStyle"]
        [::core::mem::offset_of!(playdate_graphics, setLineCapStyle) - 64usize];
    ["Offset of field: playdate_graphics::setFont"]
        [::core::mem::offset_of!(playdate_graphics, setFont) - 72usize];
    ["Offset of field: playdate_graphics::setTextTracking"]
        [::core::mem::offset_of!(playdate_graphics, setTextTracking) - 80usize];
    ["Offset of field: playdate_graphics::pushContext"]
        [::core::mem::offset_of!(playdate_graphics, pushContext) - 88usize];
    ["Offset of field: playdate_graphics::popContext"]
        [::core::mem::offset_of!(playdate_graphics, popContext) - 96usize];
    ["Offset of field: playdate_graphics::drawBitmap"]
        [::core::mem::offset_of!(playdate_graphics, drawBitmap) - 104usize];
    ["Offset of field: playdate_graphics::tileBitmap"]
        [::core::mem::offset_of!(playdate_graphics, tileBitmap) - 112usize];
    ["Offset of field: playdate_graphics::drawLine"]
        [::core::mem::offset_of!(playdate_graphics, drawLine) - 120usize];
    ["Offset of field: playdate_graphics::fillTriangle"]
        [::core::mem::offset_of!(playdate_graphics, fillTriangle) - 128usize];
    ["Offset of field: playdate_graphics::drawRect"]
        [::core::mem::offset_of!(playdate_graphics, drawRect) - 136usize];
    ["Offset of field: playdate_graphics::fillRect"]
        [::core::mem::offset_of!(playdate_graphics, fillRect) - 144usize];
    ["Offset of field: playdate_graphics::drawEllipse"]
        [::core::mem::offset_of!(playdate_graphics, drawEllipse) - 152usize];
    ["Offset of field: playdate_graphics::fillEllipse"]
        [::core::mem::offset_of!(playdate_graphics, fillEllipse) - 160usize];
    ["Offset of field: playdate_graphics::drawScaledBitmap"]
        [::core::mem::offset_of!(playdate_graphics, drawScaledBitmap) - 168usize];
    ["Offset of field: playdate_graphics::drawText"]
        [::core::mem::offset_of!(playdate_graphics, drawText) - 176usize];
    ["Offset of field: playdate_graphics::newBitmap"]
        [::core::mem::offset_of!(playdate_graphics, newBitmap) - 184usize];
    ["Offset of field: playdate_graphics::freeBitmap"]
        [::core::mem::offset_of!(playdate_graphics, freeBitmap) - 192usize];
    ["Offset of field: playdate_graphics::loadBitmap"]
        [::core::mem::offset_of!(playdate_graphics, loadBitmap) - 200usize];
    ["Offset of field: playdate_graphics::copyBitmap"]
        [::core::mem::offset_of!(playdate_graphics, copyBitmap) - 208usize];
    ["Offset of field: playdate_graphics::loadIntoBitmap"]
        [::core::mem::offset_of!(playdate_graphics, loadIntoBitmap) - 216usize];
    ["Offset of field: playdate_graphics::getBitmapData"]
        [::core::mem::offset_of!(playdate_graphics, getBitmapData) - 224usize];
    ["Offset of field: playdate_graphics::clearBitmap"]
        [::core::mem::offset_of!(playdate_graphics, clearBitmap) - 232usize];
    ["Offset of field: playdate_graphics::rotatedBitmap"]
        [::core::mem::offset_of!(playdate_graphics, rotatedBitmap) - 240usize];
    ["Offset of field: playdate_graphics::newBitmapTable"]
        [::core::mem::offset_of!(playdate_graphics, newBitmapTable) - 248usize];
    ["Offset of field: playdate_graphics::freeBitmapTable"]
        [::core::mem::offset_of!(playdate_graphics, freeBitmapTable) - 256usize];
    ["Offset of field: playdate_graphics::loadBitmapTable"]
        [::core::mem::offset_of!(playdate_graphics, loadBitmapTable) - 264usize];
    ["Offset of field: playdate_graphics::loadIntoBitmapTable"]
        [::core::mem::offset_of!(playdate_graphics, loadIntoBitmapTable) - 272usize];
    ["Offset of field: playdate_graphics::getTableBitmap"]
        [::core::mem::offset_of!(playdate_graphics, getTableBitmap) - 280usize];
    ["Offset of field: playdate_graphics::loadFont"]
        [::core::mem::offset_of!(playdate_graphics, loadFont) - 288usize];
    ["Offset of field: playdate_graphics::getFontPage"]
        [::core::mem::offset_of!(playdate_graphics, getFontPage) - 296usize];
    ["Offset of field: playdate_graphics::getPageGlyph"]
        [::core::mem::offset_of!(playdate_graphics, getPageGlyph) - 304usize];
    ["Offset of field: playdate_graphics::getGlyphKerning"]
        [::core::mem::offset_of!(playdate_graphics, getGlyphKerning) - 312usize];
    ["Offset of field: playdate_graphics::getTextWidth"]
        [::core::mem::offset_of!(playdate_graphics, getTextWidth) - 320usize];
    ["Offset of field: playdate_graphics::getFrame"]
        [::core::mem::offset_of!(playdate_graphics, getFrame) - 328usize];
    ["Offset of field: playdate_graphics::getDisplayFrame"]
        [::core::mem::offset_of!(playdate_graphics, getDisplayFrame) - 336usize];
    ["Offset of field: playdate_graphics::getDebugBitmap"]
        [::core::mem::offset_of!(playdate_graphics, getDebugBitmap) - 344usize];
    ["Offset of field: playdate_graphics::copyFrameBufferBitmap"]
        [::core::mem::offset_of!(playdate_graphics, copyFrameBufferBitmap) - 352usize];
    ["Offset of field: playdate_graphics::markUpdatedRows"]
        [::core::mem::offset_of!(playdate_graphics, markUpdatedRows) - 360usize];
    ["Offset of field: playdate_graphics::display"]
        [::core::mem::offset_of!(playdate_graphics, display) - 368usize];
    ["Offset of field: playdate_graphics::setColorToPattern"]
        [::core::mem::offset_of!(playdate_graphics, setColorToPattern) - 376usize];
    ["Offset of field: playdate_graphics::checkMaskCollision"]
        [::core::mem::offset_of!(playdate_graphics, checkMaskCollision) - 384usize];
    ["Offset of field: playdate_graphics::setScreenClipRect"]
        [::core::mem::offset_of!(playdate_graphics, setScreenClipRect) - 392usize];
    ["Offset of field: playdate_graphics::fillPolygon"]
        [::core::mem::offset_of!(playdate_graphics, fillPolygon) - 400usize];
    ["Offset of field: playdate_graphics::getFontHeight"]
        [::core::mem::offset_of!(playdate_graphics, getFontHeight) - 408usize];
    ["Offset of field: playdate_graphics::getDisplayBufferBitmap"]
        [::core::mem::offset_of!(playdate_graphics, getDisplayBufferBitmap) - 416usize];
    ["Offset of field: playdate_graphics::drawRotatedBitmap"]
        [::core::mem::offset_of!(playdate_graphics, drawRotatedBitmap) - 424usize];
    ["Offset of field: playdate_graphics::setTextLeading"]
        [::core::mem::offset_of!(playdate_graphics, setTextLeading) - 432usize];
    ["Offset of field: playdate_graphics::setBitmapMask"]
        [::core::mem::offset_of!(playdate_graphics, setBitmapMask) - 440usize];
    ["Offset of field: playdate_graphics::getBitmapMask"]
        [::core::mem::offset_of!(playdate_graphics, getBitmapMask) - 448usize];
    ["Offset of field: playdate_graphics::setStencilImage"]
        [::core::mem::offset_of!(playdate_graphics, setStencilImage) - 456usize];
    ["Offset of field: playdate_graphics::makeFontFromData"]
        [::core::mem::offset_of!(playdate_graphics, makeFontFromData) - 464usize];
    ["Offset of field: playdate_graphics::getTextTracking"]
        [::core::mem::offset_of!(playdate_graphics, getTextTracking) - 472usize];
    ["Offset of field: playdate_graphics::setPixel"]
        [::core::mem::offset_of!(playdate_graphics, setPixel) - 480usize];
    ["Offset of field: playdate_graphics::getBitmapPixel"]
        [::core::mem::offset_of!(playdate_graphics, getBitmapPixel) - 488usize];
    ["Offset of field: playdate_graphics::getBitmapTableInfo"]
        [::core::mem::offset_of!(playdate_graphics, getBitmapTableInfo) - 496usize];
    ["Offset of field: playdate_graphics::drawTextInRect"]
        [::core::mem::offset_of!(playdate_graphics, drawTextInRect) - 504usize];
};
impl Default for playdate_graphics {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type va_list = __BindgenOpaqueArray<u64, 4usize>;
impl PDButtons {
    pub const kButtonLeft: PDButtons = PDButtons(1);
}
impl PDButtons {
    pub const kButtonRight: PDButtons = PDButtons(2);
}
impl PDButtons {
    pub const kButtonUp: PDButtons = PDButtons(4);
}
impl PDButtons {
    pub const kButtonDown: PDButtons = PDButtons(8);
}
impl PDButtons {
    pub const kButtonB: PDButtons = PDButtons(16);
}
impl PDButtons {
    pub const kButtonA: PDButtons = PDButtons(32);
}
impl ::core::ops::BitOr<PDButtons> for PDButtons {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        PDButtons(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for PDButtons {
    #[inline]
    fn bitor_assign(&mut self, rhs: PDButtons) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<PDButtons> for PDButtons {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        PDButtons(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for PDButtons {
    #[inline]
    fn bitand_assign(&mut self, rhs: PDButtons) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PDButtons(pub ctypes::c_uint);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDLanguage {
    kPDLanguageEnglish = 0,
    kPDLanguageJapanese = 1,
    kPDLanguageUnknown = 2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct PDDateTime {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub weekday: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDDateTime"][::core::mem::size_of::<PDDateTime>() - 8usize];
    ["Alignment of PDDateTime"][::core::mem::align_of::<PDDateTime>() - 2usize];
    ["Offset of field: PDDateTime::year"][::core::mem::offset_of!(PDDateTime, year) - 0usize];
    ["Offset of field: PDDateTime::month"][::core::mem::offset_of!(PDDateTime, month) - 2usize];
    ["Offset of field: PDDateTime::day"][::core::mem::offset_of!(PDDateTime, day) - 3usize];
    ["Offset of field: PDDateTime::weekday"][::core::mem::offset_of!(PDDateTime, weekday) - 4usize];
    ["Offset of field: PDDateTime::hour"][::core::mem::offset_of!(PDDateTime, hour) - 5usize];
    ["Offset of field: PDDateTime::minute"][::core::mem::offset_of!(PDDateTime, minute) - 6usize];
    ["Offset of field: PDDateTime::second"][::core::mem::offset_of!(PDDateTime, second) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDMenuItem {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDPeripherals {
    kNone = 0,
    kAccelerometer = 1,
    kAllPeripherals = 65535,
}
pub type PDCallbackFunction =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ctypes::c_void) -> ctypes::c_int>;
pub type PDMenuItemCallbackFunction =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ctypes::c_void)>;
pub type PDButtonCallbackFunction = ::core::option::Option<
    unsafe extern "C" fn(
        button: PDButtons,
        down: ctypes::c_int,
        when: u32,
        userdata: *mut ctypes::c_void,
    ) -> ctypes::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sys {
    pub realloc: ::core::option::Option<
        unsafe extern "C" fn(ptr: *mut ctypes::c_void, size: usize) -> *mut ctypes::c_void,
    >,
    pub formatString: ::core::option::Option<
        unsafe extern "C" fn(
            ret: *mut *mut ctypes::c_char,
            fmt: *const ctypes::c_char,
            ...
        ) -> ctypes::c_int,
    >,
    pub logToConsole: ::core::option::Option<unsafe extern "C" fn(fmt: *const ctypes::c_char, ...)>,
    pub error: ::core::option::Option<unsafe extern "C" fn(fmt: *const ctypes::c_char, ...)>,
    pub getLanguage: ::core::option::Option<unsafe extern "C" fn() -> PDLanguage>,
    pub getCurrentTimeMilliseconds:
        ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_uint>,
    pub getSecondsSinceEpoch: ::core::option::Option<
        unsafe extern "C" fn(milliseconds: *mut ctypes::c_uint) -> ctypes::c_uint,
    >,
    pub drawFPS: ::core::option::Option<unsafe extern "C" fn(x: ctypes::c_int, y: ctypes::c_int)>,
    pub setUpdateCallback: ::core::option::Option<
        unsafe extern "C" fn(update: PDCallbackFunction, userdata: *mut ctypes::c_void),
    >,
    pub getButtonState: ::core::option::Option<
        unsafe extern "C" fn(
            current: *mut PDButtons,
            pushed: *mut PDButtons,
            released: *mut PDButtons,
        ),
    >,
    pub setPeripheralsEnabled: ::core::option::Option<unsafe extern "C" fn(mask: PDPeripherals)>,
    pub getAccelerometer: ::core::option::Option<
        unsafe extern "C" fn(outx: *mut f32, outy: *mut f32, outz: *mut f32),
    >,
    pub getCrankChange: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getCrankAngle: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub isCrankDocked: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub setCrankSoundsDisabled:
        ::core::option::Option<unsafe extern "C" fn(flag: ctypes::c_int) -> ctypes::c_int>,
    pub getFlipped: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub setAutoLockDisabled: ::core::option::Option<unsafe extern "C" fn(disable: ctypes::c_int)>,
    pub setMenuImage: ::core::option::Option<
        unsafe extern "C" fn(bitmap: *mut LCDBitmap, xOffset: ctypes::c_int),
    >,
    pub addMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ctypes::c_char,
            callback: PDMenuItemCallbackFunction,
            userdata: *mut ctypes::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub addCheckmarkMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ctypes::c_char,
            value: ctypes::c_int,
            callback: PDMenuItemCallbackFunction,
            userdata: *mut ctypes::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub addOptionsMenuItem: ::core::option::Option<
        unsafe extern "C" fn(
            title: *const ctypes::c_char,
            optionTitles: *mut *const ctypes::c_char,
            optionsCount: ctypes::c_int,
            f: PDMenuItemCallbackFunction,
            userdata: *mut ctypes::c_void,
        ) -> *mut PDMenuItem,
    >,
    pub removeAllMenuItems: ::core::option::Option<unsafe extern "C" fn()>,
    pub removeMenuItem: ::core::option::Option<unsafe extern "C" fn(menuItem: *mut PDMenuItem)>,
    pub getMenuItemValue:
        ::core::option::Option<unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> ctypes::c_int>,
    pub setMenuItemValue: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, value: ctypes::c_int),
    >,
    pub getMenuItemTitle: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> *const ctypes::c_char,
    >,
    pub setMenuItemTitle: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, title: *const ctypes::c_char),
    >,
    pub getMenuItemUserdata: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem) -> *mut ctypes::c_void,
    >,
    pub setMenuItemUserdata: ::core::option::Option<
        unsafe extern "C" fn(menuItem: *mut PDMenuItem, ud: *mut ctypes::c_void),
    >,
    pub getReduceFlashing: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub getElapsedTime: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub resetElapsedTime: ::core::option::Option<unsafe extern "C" fn()>,
    pub getBatteryPercentage: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getBatteryVoltage: ::core::option::Option<unsafe extern "C" fn() -> f32>,
    pub getTimezoneOffset: ::core::option::Option<unsafe extern "C" fn() -> i32>,
    pub shouldDisplay24HourTime: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub convertEpochToDateTime:
        ::core::option::Option<unsafe extern "C" fn(epoch: u32, datetime: *mut PDDateTime)>,
    pub convertDateTimeToEpoch:
        ::core::option::Option<unsafe extern "C" fn(datetime: *mut PDDateTime) -> u32>,
    pub clearICache: ::core::option::Option<unsafe extern "C" fn()>,
    pub setButtonCallback: ::core::option::Option<
        unsafe extern "C" fn(
            cb: PDButtonCallbackFunction,
            buttonud: *mut ctypes::c_void,
            queuesize: ctypes::c_int,
        ),
    >,
    pub setSerialMessageCallback: ::core::option::Option<
        unsafe extern "C" fn(
            callback: ::core::option::Option<unsafe extern "C" fn(data: *const ctypes::c_char)>,
        ),
    >,
    pub vaFormatString: ::core::option::Option<
        unsafe extern "C" fn(
            outstr: *mut *mut ctypes::c_char,
            fmt: *const ctypes::c_char,
            args: va_list,
        ) -> ctypes::c_int,
    >,
    pub parseString: ::core::option::Option<
        unsafe extern "C" fn(
            str_: *const ctypes::c_char,
            format: *const ctypes::c_char,
            ...
        ) -> ctypes::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sys"][::core::mem::size_of::<playdate_sys>() - 352usize];
    ["Alignment of playdate_sys"][::core::mem::align_of::<playdate_sys>() - 8usize];
    ["Offset of field: playdate_sys::realloc"]
        [::core::mem::offset_of!(playdate_sys, realloc) - 0usize];
    ["Offset of field: playdate_sys::formatString"]
        [::core::mem::offset_of!(playdate_sys, formatString) - 8usize];
    ["Offset of field: playdate_sys::logToConsole"]
        [::core::mem::offset_of!(playdate_sys, logToConsole) - 16usize];
    ["Offset of field: playdate_sys::error"]
        [::core::mem::offset_of!(playdate_sys, error) - 24usize];
    ["Offset of field: playdate_sys::getLanguage"]
        [::core::mem::offset_of!(playdate_sys, getLanguage) - 32usize];
    ["Offset of field: playdate_sys::getCurrentTimeMilliseconds"]
        [::core::mem::offset_of!(playdate_sys, getCurrentTimeMilliseconds) - 40usize];
    ["Offset of field: playdate_sys::getSecondsSinceEpoch"]
        [::core::mem::offset_of!(playdate_sys, getSecondsSinceEpoch) - 48usize];
    ["Offset of field: playdate_sys::drawFPS"]
        [::core::mem::offset_of!(playdate_sys, drawFPS) - 56usize];
    ["Offset of field: playdate_sys::setUpdateCallback"]
        [::core::mem::offset_of!(playdate_sys, setUpdateCallback) - 64usize];
    ["Offset of field: playdate_sys::getButtonState"]
        [::core::mem::offset_of!(playdate_sys, getButtonState) - 72usize];
    ["Offset of field: playdate_sys::setPeripheralsEnabled"]
        [::core::mem::offset_of!(playdate_sys, setPeripheralsEnabled) - 80usize];
    ["Offset of field: playdate_sys::getAccelerometer"]
        [::core::mem::offset_of!(playdate_sys, getAccelerometer) - 88usize];
    ["Offset of field: playdate_sys::getCrankChange"]
        [::core::mem::offset_of!(playdate_sys, getCrankChange) - 96usize];
    ["Offset of field: playdate_sys::getCrankAngle"]
        [::core::mem::offset_of!(playdate_sys, getCrankAngle) - 104usize];
    ["Offset of field: playdate_sys::isCrankDocked"]
        [::core::mem::offset_of!(playdate_sys, isCrankDocked) - 112usize];
    ["Offset of field: playdate_sys::setCrankSoundsDisabled"]
        [::core::mem::offset_of!(playdate_sys, setCrankSoundsDisabled) - 120usize];
    ["Offset of field: playdate_sys::getFlipped"]
        [::core::mem::offset_of!(playdate_sys, getFlipped) - 128usize];
    ["Offset of field: playdate_sys::setAutoLockDisabled"]
        [::core::mem::offset_of!(playdate_sys, setAutoLockDisabled) - 136usize];
    ["Offset of field: playdate_sys::setMenuImage"]
        [::core::mem::offset_of!(playdate_sys, setMenuImage) - 144usize];
    ["Offset of field: playdate_sys::addMenuItem"]
        [::core::mem::offset_of!(playdate_sys, addMenuItem) - 152usize];
    ["Offset of field: playdate_sys::addCheckmarkMenuItem"]
        [::core::mem::offset_of!(playdate_sys, addCheckmarkMenuItem) - 160usize];
    ["Offset of field: playdate_sys::addOptionsMenuItem"]
        [::core::mem::offset_of!(playdate_sys, addOptionsMenuItem) - 168usize];
    ["Offset of field: playdate_sys::removeAllMenuItems"]
        [::core::mem::offset_of!(playdate_sys, removeAllMenuItems) - 176usize];
    ["Offset of field: playdate_sys::removeMenuItem"]
        [::core::mem::offset_of!(playdate_sys, removeMenuItem) - 184usize];
    ["Offset of field: playdate_sys::getMenuItemValue"]
        [::core::mem::offset_of!(playdate_sys, getMenuItemValue) - 192usize];
    ["Offset of field: playdate_sys::setMenuItemValue"]
        [::core::mem::offset_of!(playdate_sys, setMenuItemValue) - 200usize];
    ["Offset of field: playdate_sys::getMenuItemTitle"]
        [::core::mem::offset_of!(playdate_sys, getMenuItemTitle) - 208usize];
    ["Offset of field: playdate_sys::setMenuItemTitle"]
        [::core::mem::offset_of!(playdate_sys, setMenuItemTitle) - 216usize];
    ["Offset of field: playdate_sys::getMenuItemUserdata"]
        [::core::mem::offset_of!(playdate_sys, getMenuItemUserdata) - 224usize];
    ["Offset of field: playdate_sys::setMenuItemUserdata"]
        [::core::mem::offset_of!(playdate_sys, setMenuItemUserdata) - 232usize];
    ["Offset of field: playdate_sys::getReduceFlashing"]
        [::core::mem::offset_of!(playdate_sys, getReduceFlashing) - 240usize];
    ["Offset of field: playdate_sys::getElapsedTime"]
        [::core::mem::offset_of!(playdate_sys, getElapsedTime) - 248usize];
    ["Offset of field: playdate_sys::resetElapsedTime"]
        [::core::mem::offset_of!(playdate_sys, resetElapsedTime) - 256usize];
    ["Offset of field: playdate_sys::getBatteryPercentage"]
        [::core::mem::offset_of!(playdate_sys, getBatteryPercentage) - 264usize];
    ["Offset of field: playdate_sys::getBatteryVoltage"]
        [::core::mem::offset_of!(playdate_sys, getBatteryVoltage) - 272usize];
    ["Offset of field: playdate_sys::getTimezoneOffset"]
        [::core::mem::offset_of!(playdate_sys, getTimezoneOffset) - 280usize];
    ["Offset of field: playdate_sys::shouldDisplay24HourTime"]
        [::core::mem::offset_of!(playdate_sys, shouldDisplay24HourTime) - 288usize];
    ["Offset of field: playdate_sys::convertEpochToDateTime"]
        [::core::mem::offset_of!(playdate_sys, convertEpochToDateTime) - 296usize];
    ["Offset of field: playdate_sys::convertDateTimeToEpoch"]
        [::core::mem::offset_of!(playdate_sys, convertDateTimeToEpoch) - 304usize];
    ["Offset of field: playdate_sys::clearICache"]
        [::core::mem::offset_of!(playdate_sys, clearICache) - 312usize];
    ["Offset of field: playdate_sys::setButtonCallback"]
        [::core::mem::offset_of!(playdate_sys, setButtonCallback) - 320usize];
    ["Offset of field: playdate_sys::setSerialMessageCallback"]
        [::core::mem::offset_of!(playdate_sys, setSerialMessageCallback) - 328usize];
    ["Offset of field: playdate_sys::vaFormatString"]
        [::core::mem::offset_of!(playdate_sys, vaFormatString) - 336usize];
    ["Offset of field: playdate_sys::parseString"]
        [::core::mem::offset_of!(playdate_sys, parseString) - 344usize];
};
pub type lua_State = *mut ctypes::c_void;
pub type lua_CFunction =
    ::core::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ctypes::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LuaUDObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LCDSprite {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum l_valtype {
    kInt = 0,
    kFloat = 1,
    kStr = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct lua_reg {
    pub name: *const ctypes::c_char,
    pub func: lua_CFunction,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_reg"][::core::mem::size_of::<lua_reg>() - 16usize];
    ["Alignment of lua_reg"][::core::mem::align_of::<lua_reg>() - 8usize];
    ["Offset of field: lua_reg::name"][::core::mem::offset_of!(lua_reg, name) - 0usize];
    ["Offset of field: lua_reg::func"][::core::mem::offset_of!(lua_reg, func) - 8usize];
};
impl Default for lua_reg {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LuaType {
    kTypeNil = 0,
    kTypeBool = 1,
    kTypeInt = 2,
    kTypeFloat = 3,
    kTypeString = 4,
    kTypeTable = 5,
    kTypeFunction = 6,
    kTypeThread = 7,
    kTypeObject = 8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lua_val {
    pub name: *const ctypes::c_char,
    pub type_: l_valtype,
    pub v: lua_val__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lua_val__bindgen_ty_1 {
    pub intval: ctypes::c_uint,
    pub floatval: f32,
    pub strval: *const ctypes::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_val__bindgen_ty_1"][::core::mem::size_of::<lua_val__bindgen_ty_1>() - 8usize];
    ["Alignment of lua_val__bindgen_ty_1"]
        [::core::mem::align_of::<lua_val__bindgen_ty_1>() - 8usize];
    ["Offset of field: lua_val__bindgen_ty_1::intval"]
        [::core::mem::offset_of!(lua_val__bindgen_ty_1, intval) - 0usize];
    ["Offset of field: lua_val__bindgen_ty_1::floatval"]
        [::core::mem::offset_of!(lua_val__bindgen_ty_1, floatval) - 0usize];
    ["Offset of field: lua_val__bindgen_ty_1::strval"]
        [::core::mem::offset_of!(lua_val__bindgen_ty_1, strval) - 0usize];
};
impl Default for lua_val__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lua_val"][::core::mem::size_of::<lua_val>() - 24usize];
    ["Alignment of lua_val"][::core::mem::align_of::<lua_val>() - 8usize];
    ["Offset of field: lua_val::name"][::core::mem::offset_of!(lua_val, name) - 0usize];
    ["Offset of field: lua_val::type_"][::core::mem::offset_of!(lua_val, type_) - 8usize];
    ["Offset of field: lua_val::v"][::core::mem::offset_of!(lua_val, v) - 16usize];
};
impl Default for lua_val {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_lua {
    pub addFunction: ::core::option::Option<
        unsafe extern "C" fn(
            f: lua_CFunction,
            name: *const ctypes::c_char,
            outErr: *mut *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
    pub registerClass: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ctypes::c_char,
            reg: *const lua_reg,
            vals: *const lua_val,
            isstatic: ctypes::c_int,
            outErr: *mut *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
    pub pushFunction: ::core::option::Option<unsafe extern "C" fn(f: lua_CFunction)>,
    pub indexMetatable: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub stop: ::core::option::Option<unsafe extern "C" fn()>,
    pub start: ::core::option::Option<unsafe extern "C" fn()>,
    pub getArgCount: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub getArgType: ::core::option::Option<
        unsafe extern "C" fn(pos: ctypes::c_int, outClass: *mut *const ctypes::c_char) -> LuaType,
    >,
    pub argIsNil: ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> ctypes::c_int>,
    pub getArgBool:
        ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> ctypes::c_int>,
    pub getArgInt:
        ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> ctypes::c_int>,
    pub getArgFloat: ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> f32>,
    pub getArgString:
        ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> *const ctypes::c_char>,
    pub getArgBytes: ::core::option::Option<
        unsafe extern "C" fn(pos: ctypes::c_int, outlen: *mut usize) -> *const ctypes::c_char,
    >,
    pub getArgObject: ::core::option::Option<
        unsafe extern "C" fn(
            pos: ctypes::c_int,
            type_: *mut ctypes::c_char,
            outud: *mut *mut LuaUDObject,
        ) -> *mut ctypes::c_void,
    >,
    pub getBitmap:
        ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> *mut LCDBitmap>,
    pub getSprite:
        ::core::option::Option<unsafe extern "C" fn(pos: ctypes::c_int) -> *mut LCDSprite>,
    pub pushNil: ::core::option::Option<unsafe extern "C" fn()>,
    pub pushBool: ::core::option::Option<unsafe extern "C" fn(val: ctypes::c_int)>,
    pub pushInt: ::core::option::Option<unsafe extern "C" fn(val: ctypes::c_int)>,
    pub pushFloat: ::core::option::Option<unsafe extern "C" fn(val: f32)>,
    pub pushString: ::core::option::Option<unsafe extern "C" fn(str_: *const ctypes::c_char)>,
    pub pushBytes:
        ::core::option::Option<unsafe extern "C" fn(str_: *const ctypes::c_char, len: usize)>,
    pub pushBitmap: ::core::option::Option<unsafe extern "C" fn(bitmap: *mut LCDBitmap)>,
    pub pushSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub pushObject: ::core::option::Option<
        unsafe extern "C" fn(
            obj: *mut ctypes::c_void,
            type_: *mut ctypes::c_char,
            nValues: ctypes::c_int,
        ) -> *mut LuaUDObject,
    >,
    pub retainObject:
        ::core::option::Option<unsafe extern "C" fn(obj: *mut LuaUDObject) -> *mut LuaUDObject>,
    pub releaseObject: ::core::option::Option<unsafe extern "C" fn(obj: *mut LuaUDObject)>,
    pub setUserValue:
        ::core::option::Option<unsafe extern "C" fn(obj: *mut LuaUDObject, slot: ctypes::c_uint)>,
    pub getUserValue: ::core::option::Option<
        unsafe extern "C" fn(obj: *mut LuaUDObject, slot: ctypes::c_uint) -> ctypes::c_int,
    >,
    pub callFunction_deprecated: ::core::option::Option<
        unsafe extern "C" fn(name: *const ctypes::c_char, nargs: ctypes::c_int),
    >,
    pub callFunction: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ctypes::c_char,
            nargs: ctypes::c_int,
            outerr: *mut *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_lua"][::core::mem::size_of::<playdate_lua>() - 256usize];
    ["Alignment of playdate_lua"][::core::mem::align_of::<playdate_lua>() - 8usize];
    ["Offset of field: playdate_lua::addFunction"]
        [::core::mem::offset_of!(playdate_lua, addFunction) - 0usize];
    ["Offset of field: playdate_lua::registerClass"]
        [::core::mem::offset_of!(playdate_lua, registerClass) - 8usize];
    ["Offset of field: playdate_lua::pushFunction"]
        [::core::mem::offset_of!(playdate_lua, pushFunction) - 16usize];
    ["Offset of field: playdate_lua::indexMetatable"]
        [::core::mem::offset_of!(playdate_lua, indexMetatable) - 24usize];
    ["Offset of field: playdate_lua::stop"][::core::mem::offset_of!(playdate_lua, stop) - 32usize];
    ["Offset of field: playdate_lua::start"]
        [::core::mem::offset_of!(playdate_lua, start) - 40usize];
    ["Offset of field: playdate_lua::getArgCount"]
        [::core::mem::offset_of!(playdate_lua, getArgCount) - 48usize];
    ["Offset of field: playdate_lua::getArgType"]
        [::core::mem::offset_of!(playdate_lua, getArgType) - 56usize];
    ["Offset of field: playdate_lua::argIsNil"]
        [::core::mem::offset_of!(playdate_lua, argIsNil) - 64usize];
    ["Offset of field: playdate_lua::getArgBool"]
        [::core::mem::offset_of!(playdate_lua, getArgBool) - 72usize];
    ["Offset of field: playdate_lua::getArgInt"]
        [::core::mem::offset_of!(playdate_lua, getArgInt) - 80usize];
    ["Offset of field: playdate_lua::getArgFloat"]
        [::core::mem::offset_of!(playdate_lua, getArgFloat) - 88usize];
    ["Offset of field: playdate_lua::getArgString"]
        [::core::mem::offset_of!(playdate_lua, getArgString) - 96usize];
    ["Offset of field: playdate_lua::getArgBytes"]
        [::core::mem::offset_of!(playdate_lua, getArgBytes) - 104usize];
    ["Offset of field: playdate_lua::getArgObject"]
        [::core::mem::offset_of!(playdate_lua, getArgObject) - 112usize];
    ["Offset of field: playdate_lua::getBitmap"]
        [::core::mem::offset_of!(playdate_lua, getBitmap) - 120usize];
    ["Offset of field: playdate_lua::getSprite"]
        [::core::mem::offset_of!(playdate_lua, getSprite) - 128usize];
    ["Offset of field: playdate_lua::pushNil"]
        [::core::mem::offset_of!(playdate_lua, pushNil) - 136usize];
    ["Offset of field: playdate_lua::pushBool"]
        [::core::mem::offset_of!(playdate_lua, pushBool) - 144usize];
    ["Offset of field: playdate_lua::pushInt"]
        [::core::mem::offset_of!(playdate_lua, pushInt) - 152usize];
    ["Offset of field: playdate_lua::pushFloat"]
        [::core::mem::offset_of!(playdate_lua, pushFloat) - 160usize];
    ["Offset of field: playdate_lua::pushString"]
        [::core::mem::offset_of!(playdate_lua, pushString) - 168usize];
    ["Offset of field: playdate_lua::pushBytes"]
        [::core::mem::offset_of!(playdate_lua, pushBytes) - 176usize];
    ["Offset of field: playdate_lua::pushBitmap"]
        [::core::mem::offset_of!(playdate_lua, pushBitmap) - 184usize];
    ["Offset of field: playdate_lua::pushSprite"]
        [::core::mem::offset_of!(playdate_lua, pushSprite) - 192usize];
    ["Offset of field: playdate_lua::pushObject"]
        [::core::mem::offset_of!(playdate_lua, pushObject) - 200usize];
    ["Offset of field: playdate_lua::retainObject"]
        [::core::mem::offset_of!(playdate_lua, retainObject) - 208usize];
    ["Offset of field: playdate_lua::releaseObject"]
        [::core::mem::offset_of!(playdate_lua, releaseObject) - 216usize];
    ["Offset of field: playdate_lua::setUserValue"]
        [::core::mem::offset_of!(playdate_lua, setUserValue) - 224usize];
    ["Offset of field: playdate_lua::getUserValue"]
        [::core::mem::offset_of!(playdate_lua, getUserValue) - 232usize];
    ["Offset of field: playdate_lua::callFunction_deprecated"]
        [::core::mem::offset_of!(playdate_lua, callFunction_deprecated) - 240usize];
    ["Offset of field: playdate_lua::callFunction"]
        [::core::mem::offset_of!(playdate_lua, callFunction) - 248usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum json_value_type {
    kJSONNull = 0,
    kJSONTrue = 1,
    kJSONFalse = 2,
    kJSONInteger = 3,
    kJSONFloat = 4,
    kJSONString = 5,
    kJSONArray = 6,
    kJSONTable = 7,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct json_value {
    pub type_: ctypes::c_char,
    pub data: json_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union json_value__bindgen_ty_1 {
    pub intval: ctypes::c_int,
    pub floatval: f32,
    pub stringval: *mut ctypes::c_char,
    pub arrayval: *mut ctypes::c_void,
    pub tableval: *mut ctypes::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of json_value__bindgen_ty_1"]
        [::core::mem::size_of::<json_value__bindgen_ty_1>() - 8usize];
    ["Alignment of json_value__bindgen_ty_1"]
        [::core::mem::align_of::<json_value__bindgen_ty_1>() - 8usize];
    ["Offset of field: json_value__bindgen_ty_1::intval"]
        [::core::mem::offset_of!(json_value__bindgen_ty_1, intval) - 0usize];
    ["Offset of field: json_value__bindgen_ty_1::floatval"]
        [::core::mem::offset_of!(json_value__bindgen_ty_1, floatval) - 0usize];
    ["Offset of field: json_value__bindgen_ty_1::stringval"]
        [::core::mem::offset_of!(json_value__bindgen_ty_1, stringval) - 0usize];
    ["Offset of field: json_value__bindgen_ty_1::arrayval"]
        [::core::mem::offset_of!(json_value__bindgen_ty_1, arrayval) - 0usize];
    ["Offset of field: json_value__bindgen_ty_1::tableval"]
        [::core::mem::offset_of!(json_value__bindgen_ty_1, tableval) - 0usize];
};
impl Default for json_value__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of json_value"][::core::mem::size_of::<json_value>() - 16usize];
    ["Alignment of json_value"][::core::mem::align_of::<json_value>() - 8usize];
    ["Offset of field: json_value::type_"][::core::mem::offset_of!(json_value, type_) - 0usize];
    ["Offset of field: json_value::data"][::core::mem::offset_of!(json_value, data) - 8usize];
};
impl Default for json_value {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct json_decoder {
    pub decodeError: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            error: *const ctypes::c_char,
            linenum: ctypes::c_int,
        ),
    >,
    pub willDecodeSublist: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            name: *const ctypes::c_char,
            type_: json_value_type,
        ),
    >,
    pub shouldDecodeTableValueForKey: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            key: *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
    pub didDecodeTableValue: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            key: *const ctypes::c_char,
            value: json_value,
        ),
    >,
    pub shouldDecodeArrayValueAtIndex: ::core::option::Option<
        unsafe extern "C" fn(decoder: *mut json_decoder, pos: ctypes::c_int) -> ctypes::c_int,
    >,
    pub didDecodeArrayValue: ::core::option::Option<
        unsafe extern "C" fn(decoder: *mut json_decoder, pos: ctypes::c_int, value: json_value),
    >,
    pub didDecodeSublist: ::core::option::Option<
        unsafe extern "C" fn(
            decoder: *mut json_decoder,
            name: *const ctypes::c_char,
            type_: json_value_type,
        ) -> *mut ctypes::c_void,
    >,
    pub userdata: *mut ctypes::c_void,
    pub returnString: ctypes::c_int,
    pub path: *const ctypes::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of json_decoder"][::core::mem::size_of::<json_decoder>() - 80usize];
    ["Alignment of json_decoder"][::core::mem::align_of::<json_decoder>() - 8usize];
    ["Offset of field: json_decoder::decodeError"]
        [::core::mem::offset_of!(json_decoder, decodeError) - 0usize];
    ["Offset of field: json_decoder::willDecodeSublist"]
        [::core::mem::offset_of!(json_decoder, willDecodeSublist) - 8usize];
    ["Offset of field: json_decoder::shouldDecodeTableValueForKey"]
        [::core::mem::offset_of!(json_decoder, shouldDecodeTableValueForKey) - 16usize];
    ["Offset of field: json_decoder::didDecodeTableValue"]
        [::core::mem::offset_of!(json_decoder, didDecodeTableValue) - 24usize];
    ["Offset of field: json_decoder::shouldDecodeArrayValueAtIndex"]
        [::core::mem::offset_of!(json_decoder, shouldDecodeArrayValueAtIndex) - 32usize];
    ["Offset of field: json_decoder::didDecodeArrayValue"]
        [::core::mem::offset_of!(json_decoder, didDecodeArrayValue) - 40usize];
    ["Offset of field: json_decoder::didDecodeSublist"]
        [::core::mem::offset_of!(json_decoder, didDecodeSublist) - 48usize];
    ["Offset of field: json_decoder::userdata"]
        [::core::mem::offset_of!(json_decoder, userdata) - 56usize];
    ["Offset of field: json_decoder::returnString"]
        [::core::mem::offset_of!(json_decoder, returnString) - 64usize];
    ["Offset of field: json_decoder::path"][::core::mem::offset_of!(json_decoder, path) - 72usize];
};
impl Default for json_decoder {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type json_readFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        buf: *mut u8,
        bufsize: ctypes::c_int,
    ) -> ctypes::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct json_reader {
    pub read: json_readFunc,
    pub userdata: *mut ctypes::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of json_reader"][::core::mem::size_of::<json_reader>() - 16usize];
    ["Alignment of json_reader"][::core::mem::align_of::<json_reader>() - 8usize];
    ["Offset of field: json_reader::read"][::core::mem::offset_of!(json_reader, read) - 0usize];
    ["Offset of field: json_reader::userdata"]
        [::core::mem::offset_of!(json_reader, userdata) - 8usize];
};
impl Default for json_reader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type json_writeFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        str_: *const ctypes::c_char,
        len: ctypes::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct json_encoder {
    pub writeStringFunc: json_writeFunc,
    pub userdata: *mut ctypes::c_void,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub startArray: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub addArrayMember: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub endArray: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub startTable: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub addTableMember: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            name: *const ctypes::c_char,
            len: ctypes::c_int,
        ),
    >,
    pub endTable: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeNull: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeFalse: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeTrue: ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder)>,
    pub writeInt: ::core::option::Option<
        unsafe extern "C" fn(encoder: *mut json_encoder, num: ctypes::c_int),
    >,
    pub writeDouble:
        ::core::option::Option<unsafe extern "C" fn(encoder: *mut json_encoder, num: f64)>,
    pub writeString: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            str_: *const ctypes::c_char,
            len: ctypes::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of json_encoder"][::core::mem::size_of::<json_encoder>() - 120usize];
    ["Alignment of json_encoder"][::core::mem::align_of::<json_encoder>() - 8usize];
    ["Offset of field: json_encoder::writeStringFunc"]
        [::core::mem::offset_of!(json_encoder, writeStringFunc) - 0usize];
    ["Offset of field: json_encoder::userdata"]
        [::core::mem::offset_of!(json_encoder, userdata) - 8usize];
    ["Offset of field: json_encoder::startArray"]
        [::core::mem::offset_of!(json_encoder, startArray) - 24usize];
    ["Offset of field: json_encoder::addArrayMember"]
        [::core::mem::offset_of!(json_encoder, addArrayMember) - 32usize];
    ["Offset of field: json_encoder::endArray"]
        [::core::mem::offset_of!(json_encoder, endArray) - 40usize];
    ["Offset of field: json_encoder::startTable"]
        [::core::mem::offset_of!(json_encoder, startTable) - 48usize];
    ["Offset of field: json_encoder::addTableMember"]
        [::core::mem::offset_of!(json_encoder, addTableMember) - 56usize];
    ["Offset of field: json_encoder::endTable"]
        [::core::mem::offset_of!(json_encoder, endTable) - 64usize];
    ["Offset of field: json_encoder::writeNull"]
        [::core::mem::offset_of!(json_encoder, writeNull) - 72usize];
    ["Offset of field: json_encoder::writeFalse"]
        [::core::mem::offset_of!(json_encoder, writeFalse) - 80usize];
    ["Offset of field: json_encoder::writeTrue"]
        [::core::mem::offset_of!(json_encoder, writeTrue) - 88usize];
    ["Offset of field: json_encoder::writeInt"]
        [::core::mem::offset_of!(json_encoder, writeInt) - 96usize];
    ["Offset of field: json_encoder::writeDouble"]
        [::core::mem::offset_of!(json_encoder, writeDouble) - 104usize];
    ["Offset of field: json_encoder::writeString"]
        [::core::mem::offset_of!(json_encoder, writeString) - 112usize];
};
impl Default for json_encoder {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl json_encoder {
    #[inline]
    pub fn pretty(&self) -> ctypes::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pretty(&mut self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pretty_raw(this: *const Self) -> ctypes::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pretty_raw(this: *mut Self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn startedTable(&self) -> ctypes::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_startedTable(&mut self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn startedTable_raw(this: *const Self) -> ctypes::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_startedTable_raw(this: *mut Self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn startedArray(&self) -> ctypes::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_startedArray(&mut self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn startedArray_raw(this: *const Self) -> ctypes::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_startedArray_raw(this: *mut Self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn depth(&self) -> ctypes::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_depth(&mut self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn depth_raw(this: *const Self) -> ctypes::c_int {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_depth_raw(this: *mut Self, val: ctypes::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pretty: ctypes::c_int,
        startedTable: ctypes::c_int,
        startedArray: ctypes::c_int,
        depth: ctypes::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pretty: u32 = unsafe { ::core::mem::transmute(pretty) };
            pretty as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let startedTable: u32 = unsafe { ::core::mem::transmute(startedTable) };
            startedTable as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let startedArray: u32 = unsafe { ::core::mem::transmute(startedArray) };
            startedArray as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let depth: u32 = unsafe { ::core::mem::transmute(depth) };
            depth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_json {
    pub initEncoder: ::core::option::Option<
        unsafe extern "C" fn(
            encoder: *mut json_encoder,
            write: json_writeFunc,
            userdata: *mut ctypes::c_void,
            pretty: ctypes::c_int,
        ),
    >,
    pub decode: ::core::option::Option<
        unsafe extern "C" fn(
            functions: *mut json_decoder,
            reader: json_reader,
            outval: *mut json_value,
        ) -> ctypes::c_int,
    >,
    pub decodeString: ::core::option::Option<
        unsafe extern "C" fn(
            functions: *mut json_decoder,
            jsonString: *const ctypes::c_char,
            outval: *mut json_value,
        ) -> ctypes::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_json"][::core::mem::size_of::<playdate_json>() - 24usize];
    ["Alignment of playdate_json"][::core::mem::align_of::<playdate_json>() - 8usize];
    ["Offset of field: playdate_json::initEncoder"]
        [::core::mem::offset_of!(playdate_json, initEncoder) - 0usize];
    ["Offset of field: playdate_json::decode"]
        [::core::mem::offset_of!(playdate_json, decode) - 8usize];
    ["Offset of field: playdate_json::decodeString"]
        [::core::mem::offset_of!(playdate_json, decodeString) - 16usize];
};
pub type SDFile = ctypes::c_void;
impl FileOptions {
    pub const kFileRead: FileOptions = FileOptions(1);
}
impl FileOptions {
    pub const kFileReadData: FileOptions = FileOptions(2);
}
impl FileOptions {
    pub const kFileWrite: FileOptions = FileOptions(4);
}
impl FileOptions {
    pub const kFileAppend: FileOptions = FileOptions(8);
}
impl ::core::ops::BitOr<FileOptions> for FileOptions {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        FileOptions(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for FileOptions {
    #[inline]
    fn bitor_assign(&mut self, rhs: FileOptions) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<FileOptions> for FileOptions {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        FileOptions(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for FileOptions {
    #[inline]
    fn bitand_assign(&mut self, rhs: FileOptions) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FileOptions(pub ctypes::c_uint);
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct FileStat {
    pub isdir: ctypes::c_int,
    pub size: ctypes::c_uint,
    pub m_year: ctypes::c_int,
    pub m_month: ctypes::c_int,
    pub m_day: ctypes::c_int,
    pub m_hour: ctypes::c_int,
    pub m_minute: ctypes::c_int,
    pub m_second: ctypes::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileStat"][::core::mem::size_of::<FileStat>() - 32usize];
    ["Alignment of FileStat"][::core::mem::align_of::<FileStat>() - 4usize];
    ["Offset of field: FileStat::isdir"][::core::mem::offset_of!(FileStat, isdir) - 0usize];
    ["Offset of field: FileStat::size"][::core::mem::offset_of!(FileStat, size) - 4usize];
    ["Offset of field: FileStat::m_year"][::core::mem::offset_of!(FileStat, m_year) - 8usize];
    ["Offset of field: FileStat::m_month"][::core::mem::offset_of!(FileStat, m_month) - 12usize];
    ["Offset of field: FileStat::m_day"][::core::mem::offset_of!(FileStat, m_day) - 16usize];
    ["Offset of field: FileStat::m_hour"][::core::mem::offset_of!(FileStat, m_hour) - 20usize];
    ["Offset of field: FileStat::m_minute"][::core::mem::offset_of!(FileStat, m_minute) - 24usize];
    ["Offset of field: FileStat::m_second"][::core::mem::offset_of!(FileStat, m_second) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_file {
    pub geterr: ::core::option::Option<unsafe extern "C" fn() -> *const ctypes::c_char>,
    pub listfiles: ::core::option::Option<
        unsafe extern "C" fn(
            path: *const ctypes::c_char,
            callback: ::core::option::Option<
                unsafe extern "C" fn(path: *const ctypes::c_char, userdata: *mut ctypes::c_void),
            >,
            userdata: *mut ctypes::c_void,
            showhidden: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub stat: ::core::option::Option<
        unsafe extern "C" fn(path: *const ctypes::c_char, stat: *mut FileStat) -> ctypes::c_int,
    >,
    pub mkdir:
        ::core::option::Option<unsafe extern "C" fn(path: *const ctypes::c_char) -> ctypes::c_int>,
    pub unlink: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ctypes::c_char,
            recursive: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub rename: ::core::option::Option<
        unsafe extern "C" fn(
            from: *const ctypes::c_char,
            to: *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(name: *const ctypes::c_char, mode: FileOptions) -> *mut SDFile,
    >,
    pub close: ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ctypes::c_int>,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            buf: *mut ctypes::c_void,
            len: ctypes::c_uint,
        ) -> ctypes::c_int,
    >,
    pub write: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            buf: *const ctypes::c_void,
            len: ctypes::c_uint,
        ) -> ctypes::c_int,
    >,
    pub flush: ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ctypes::c_int>,
    pub tell: ::core::option::Option<unsafe extern "C" fn(file: *mut SDFile) -> ctypes::c_int>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut SDFile,
            pos: ctypes::c_int,
            whence: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_file"][::core::mem::size_of::<playdate_file>() - 104usize];
    ["Alignment of playdate_file"][::core::mem::align_of::<playdate_file>() - 8usize];
    ["Offset of field: playdate_file::geterr"]
        [::core::mem::offset_of!(playdate_file, geterr) - 0usize];
    ["Offset of field: playdate_file::listfiles"]
        [::core::mem::offset_of!(playdate_file, listfiles) - 8usize];
    ["Offset of field: playdate_file::stat"]
        [::core::mem::offset_of!(playdate_file, stat) - 16usize];
    ["Offset of field: playdate_file::mkdir"]
        [::core::mem::offset_of!(playdate_file, mkdir) - 24usize];
    ["Offset of field: playdate_file::unlink"]
        [::core::mem::offset_of!(playdate_file, unlink) - 32usize];
    ["Offset of field: playdate_file::rename"]
        [::core::mem::offset_of!(playdate_file, rename) - 40usize];
    ["Offset of field: playdate_file::open"]
        [::core::mem::offset_of!(playdate_file, open) - 48usize];
    ["Offset of field: playdate_file::close"]
        [::core::mem::offset_of!(playdate_file, close) - 56usize];
    ["Offset of field: playdate_file::read"]
        [::core::mem::offset_of!(playdate_file, read) - 64usize];
    ["Offset of field: playdate_file::write"]
        [::core::mem::offset_of!(playdate_file, write) - 72usize];
    ["Offset of field: playdate_file::flush"]
        [::core::mem::offset_of!(playdate_file, flush) - 80usize];
    ["Offset of field: playdate_file::tell"]
        [::core::mem::offset_of!(playdate_file, tell) - 88usize];
    ["Offset of field: playdate_file::seek"]
        [::core::mem::offset_of!(playdate_file, seek) - 96usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SpriteCollisionResponseType {
    kCollisionTypeSlide = 0,
    kCollisionTypeFreeze = 1,
    kCollisionTypeOverlap = 2,
    kCollisionTypeBounce = 3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct PDRect {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDRect"][::core::mem::size_of::<PDRect>() - 16usize];
    ["Alignment of PDRect"][::core::mem::align_of::<PDRect>() - 4usize];
    ["Offset of field: PDRect::x"][::core::mem::offset_of!(PDRect, x) - 0usize];
    ["Offset of field: PDRect::y"][::core::mem::offset_of!(PDRect, y) - 4usize];
    ["Offset of field: PDRect::width"][::core::mem::offset_of!(PDRect, width) - 8usize];
    ["Offset of field: PDRect::height"][::core::mem::offset_of!(PDRect, height) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct CollisionPoint {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CollisionPoint"][::core::mem::size_of::<CollisionPoint>() - 8usize];
    ["Alignment of CollisionPoint"][::core::mem::align_of::<CollisionPoint>() - 4usize];
    ["Offset of field: CollisionPoint::x"][::core::mem::offset_of!(CollisionPoint, x) - 0usize];
    ["Offset of field: CollisionPoint::y"][::core::mem::offset_of!(CollisionPoint, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct CollisionVector {
    pub x: ctypes::c_int,
    pub y: ctypes::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CollisionVector"][::core::mem::size_of::<CollisionVector>() - 8usize];
    ["Alignment of CollisionVector"][::core::mem::align_of::<CollisionVector>() - 4usize];
    ["Offset of field: CollisionVector::x"][::core::mem::offset_of!(CollisionVector, x) - 0usize];
    ["Offset of field: CollisionVector::y"][::core::mem::offset_of!(CollisionVector, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct SpriteCollisionInfo {
    pub sprite: *mut LCDSprite,
    pub other: *mut LCDSprite,
    pub responseType: SpriteCollisionResponseType,
    pub overlaps: u8,
    pub ti: f32,
    pub move_: CollisionPoint,
    pub normal: CollisionVector,
    pub touch: CollisionPoint,
    pub spriteRect: PDRect,
    pub otherRect: PDRect,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpriteCollisionInfo"][::core::mem::size_of::<SpriteCollisionInfo>() - 88usize];
    ["Alignment of SpriteCollisionInfo"][::core::mem::align_of::<SpriteCollisionInfo>() - 8usize];
    ["Offset of field: SpriteCollisionInfo::sprite"]
        [::core::mem::offset_of!(SpriteCollisionInfo, sprite) - 0usize];
    ["Offset of field: SpriteCollisionInfo::other"]
        [::core::mem::offset_of!(SpriteCollisionInfo, other) - 8usize];
    ["Offset of field: SpriteCollisionInfo::responseType"]
        [::core::mem::offset_of!(SpriteCollisionInfo, responseType) - 16usize];
    ["Offset of field: SpriteCollisionInfo::overlaps"]
        [::core::mem::offset_of!(SpriteCollisionInfo, overlaps) - 20usize];
    ["Offset of field: SpriteCollisionInfo::ti"]
        [::core::mem::offset_of!(SpriteCollisionInfo, ti) - 24usize];
    ["Offset of field: SpriteCollisionInfo::move_"]
        [::core::mem::offset_of!(SpriteCollisionInfo, move_) - 28usize];
    ["Offset of field: SpriteCollisionInfo::normal"]
        [::core::mem::offset_of!(SpriteCollisionInfo, normal) - 36usize];
    ["Offset of field: SpriteCollisionInfo::touch"]
        [::core::mem::offset_of!(SpriteCollisionInfo, touch) - 44usize];
    ["Offset of field: SpriteCollisionInfo::spriteRect"]
        [::core::mem::offset_of!(SpriteCollisionInfo, spriteRect) - 52usize];
    ["Offset of field: SpriteCollisionInfo::otherRect"]
        [::core::mem::offset_of!(SpriteCollisionInfo, otherRect) - 68usize];
};
impl Default for SpriteCollisionInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct SpriteQueryInfo {
    pub sprite: *mut LCDSprite,
    pub ti1: f32,
    pub ti2: f32,
    pub entryPoint: CollisionPoint,
    pub exitPoint: CollisionPoint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpriteQueryInfo"][::core::mem::size_of::<SpriteQueryInfo>() - 32usize];
    ["Alignment of SpriteQueryInfo"][::core::mem::align_of::<SpriteQueryInfo>() - 8usize];
    ["Offset of field: SpriteQueryInfo::sprite"]
        [::core::mem::offset_of!(SpriteQueryInfo, sprite) - 0usize];
    ["Offset of field: SpriteQueryInfo::ti1"]
        [::core::mem::offset_of!(SpriteQueryInfo, ti1) - 8usize];
    ["Offset of field: SpriteQueryInfo::ti2"]
        [::core::mem::offset_of!(SpriteQueryInfo, ti2) - 12usize];
    ["Offset of field: SpriteQueryInfo::entryPoint"]
        [::core::mem::offset_of!(SpriteQueryInfo, entryPoint) - 16usize];
    ["Offset of field: SpriteQueryInfo::exitPoint"]
        [::core::mem::offset_of!(SpriteQueryInfo, exitPoint) - 24usize];
};
impl Default for SpriteQueryInfo {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type LCDSpriteDrawFunction = ::core::option::Option<
    unsafe extern "C" fn(sprite: *mut LCDSprite, bounds: PDRect, drawrect: PDRect),
>;
pub type LCDSpriteUpdateFunction =
    ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>;
pub type LCDSpriteCollisionFilterProc = ::core::option::Option<
    unsafe extern "C" fn(
        sprite: *mut LCDSprite,
        other: *mut LCDSprite,
    ) -> SpriteCollisionResponseType,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sprite {
    pub setAlwaysRedraw: ::core::option::Option<unsafe extern "C" fn(flag: ctypes::c_int)>,
    pub addDirtyRect: ::core::option::Option<unsafe extern "C" fn(dirtyRect: LCDRect)>,
    pub drawSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub updateAndDrawSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub newSprite: ::core::option::Option<unsafe extern "C" fn() -> *mut LCDSprite>,
    pub freeSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub copy:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut LCDSprite>,
    pub addSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub removeSprite: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub removeSprites: ::core::option::Option<
        unsafe extern "C" fn(sprites: *mut *mut LCDSprite, count: ctypes::c_int),
    >,
    pub removeAllSprites: ::core::option::Option<unsafe extern "C" fn()>,
    pub getSpriteCount: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub setBounds:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, bounds: PDRect)>,
    pub getBounds: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> PDRect>,
    pub moveTo:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, x: f32, y: f32)>,
    pub moveBy:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, dx: f32, dy: f32)>,
    pub setImage: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, image: *mut LCDBitmap, flip: LCDBitmapFlip),
    >,
    pub getImage:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut LCDBitmap>,
    pub setSize:
        ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, width: f32, height: f32)>,
    pub setZIndex:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, zIndex: i16)>,
    pub getZIndex: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> i16>,
    pub setDrawMode: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, mode: LCDBitmapDrawMode),
    >,
    pub setImageFlip:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flip: LCDBitmapFlip)>,
    pub getImageFlip:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> LCDBitmapFlip>,
    pub setStencil: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, stencil: *mut LCDBitmap),
    >,
    pub setClipRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, clipRect: LCDRect)>,
    pub clearClipRect: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setClipRectsInRange: ::core::option::Option<
        unsafe extern "C" fn(clipRect: LCDRect, startZ: ctypes::c_int, endZ: ctypes::c_int),
    >,
    pub clearClipRectsInRange:
        ::core::option::Option<unsafe extern "C" fn(startZ: ctypes::c_int, endZ: ctypes::c_int)>,
    pub setUpdatesEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ctypes::c_int)>,
    pub updatesEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ctypes::c_int>,
    pub setCollisionsEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ctypes::c_int)>,
    pub collisionsEnabled:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ctypes::c_int>,
    pub setVisible:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ctypes::c_int)>,
    pub isVisible:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> ctypes::c_int>,
    pub setOpaque:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ctypes::c_int)>,
    pub markDirty: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setTag: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, tag: u8)>,
    pub getTag: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> u8>,
    pub setIgnoresDrawOffset:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, flag: ctypes::c_int)>,
    pub setUpdateFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteUpdateFunction),
    >,
    pub setDrawFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteDrawFunction),
    >,
    pub getPosition: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, x: *mut f32, y: *mut f32),
    >,
    pub resetCollisionWorld: ::core::option::Option<unsafe extern "C" fn()>,
    pub setCollideRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, collideRect: PDRect)>,
    pub getCollideRect:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> PDRect>,
    pub clearCollideRect: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setCollisionResponseFunction: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, func: LCDSpriteCollisionFilterProc),
    >,
    pub checkCollisions: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            goalX: f32,
            goalY: f32,
            actualX: *mut f32,
            actualY: *mut f32,
            len: *mut ctypes::c_int,
        ) -> *mut SpriteCollisionInfo,
    >,
    pub moveWithCollisions: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            goalX: f32,
            goalY: f32,
            actualX: *mut f32,
            actualY: *mut f32,
            len: *mut ctypes::c_int,
        ) -> *mut SpriteCollisionInfo,
    >,
    pub querySpritesAtPoint: ::core::option::Option<
        unsafe extern "C" fn(x: f32, y: f32, len: *mut ctypes::c_int) -> *mut *mut LCDSprite,
    >,
    pub querySpritesInRect: ::core::option::Option<
        unsafe extern "C" fn(
            x: f32,
            y: f32,
            width: f32,
            height: f32,
            len: *mut ctypes::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub querySpritesAlongLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            len: *mut ctypes::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub querySpriteInfoAlongLine: ::core::option::Option<
        unsafe extern "C" fn(
            x1: f32,
            y1: f32,
            x2: f32,
            y2: f32,
            len: *mut ctypes::c_int,
        ) -> *mut SpriteQueryInfo,
    >,
    pub overlappingSprites: ::core::option::Option<
        unsafe extern "C" fn(
            sprite: *mut LCDSprite,
            len: *mut ctypes::c_int,
        ) -> *mut *mut LCDSprite,
    >,
    pub allOverlappingSprites: ::core::option::Option<
        unsafe extern "C" fn(len: *mut ctypes::c_int) -> *mut *mut LCDSprite,
    >,
    pub setStencilPattern:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite, pattern: *mut u8)>,
    pub clearStencil: ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite)>,
    pub setUserdata: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, userdata: *mut ctypes::c_void),
    >,
    pub getUserdata:
        ::core::option::Option<unsafe extern "C" fn(sprite: *mut LCDSprite) -> *mut ctypes::c_void>,
    pub setStencilImage: ::core::option::Option<
        unsafe extern "C" fn(sprite: *mut LCDSprite, stencil: *mut LCDBitmap, tile: ctypes::c_int),
    >,
    pub setCenter: ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, x: f32, y: f32)>,
    pub getCenter:
        ::core::option::Option<unsafe extern "C" fn(s: *mut LCDSprite, x: *mut f32, y: *mut f32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sprite"][::core::mem::size_of::<playdate_sprite>() - 504usize];
    ["Alignment of playdate_sprite"][::core::mem::align_of::<playdate_sprite>() - 8usize];
    ["Offset of field: playdate_sprite::setAlwaysRedraw"]
        [::core::mem::offset_of!(playdate_sprite, setAlwaysRedraw) - 0usize];
    ["Offset of field: playdate_sprite::addDirtyRect"]
        [::core::mem::offset_of!(playdate_sprite, addDirtyRect) - 8usize];
    ["Offset of field: playdate_sprite::drawSprites"]
        [::core::mem::offset_of!(playdate_sprite, drawSprites) - 16usize];
    ["Offset of field: playdate_sprite::updateAndDrawSprites"]
        [::core::mem::offset_of!(playdate_sprite, updateAndDrawSprites) - 24usize];
    ["Offset of field: playdate_sprite::newSprite"]
        [::core::mem::offset_of!(playdate_sprite, newSprite) - 32usize];
    ["Offset of field: playdate_sprite::freeSprite"]
        [::core::mem::offset_of!(playdate_sprite, freeSprite) - 40usize];
    ["Offset of field: playdate_sprite::copy"]
        [::core::mem::offset_of!(playdate_sprite, copy) - 48usize];
    ["Offset of field: playdate_sprite::addSprite"]
        [::core::mem::offset_of!(playdate_sprite, addSprite) - 56usize];
    ["Offset of field: playdate_sprite::removeSprite"]
        [::core::mem::offset_of!(playdate_sprite, removeSprite) - 64usize];
    ["Offset of field: playdate_sprite::removeSprites"]
        [::core::mem::offset_of!(playdate_sprite, removeSprites) - 72usize];
    ["Offset of field: playdate_sprite::removeAllSprites"]
        [::core::mem::offset_of!(playdate_sprite, removeAllSprites) - 80usize];
    ["Offset of field: playdate_sprite::getSpriteCount"]
        [::core::mem::offset_of!(playdate_sprite, getSpriteCount) - 88usize];
    ["Offset of field: playdate_sprite::setBounds"]
        [::core::mem::offset_of!(playdate_sprite, setBounds) - 96usize];
    ["Offset of field: playdate_sprite::getBounds"]
        [::core::mem::offset_of!(playdate_sprite, getBounds) - 104usize];
    ["Offset of field: playdate_sprite::moveTo"]
        [::core::mem::offset_of!(playdate_sprite, moveTo) - 112usize];
    ["Offset of field: playdate_sprite::moveBy"]
        [::core::mem::offset_of!(playdate_sprite, moveBy) - 120usize];
    ["Offset of field: playdate_sprite::setImage"]
        [::core::mem::offset_of!(playdate_sprite, setImage) - 128usize];
    ["Offset of field: playdate_sprite::getImage"]
        [::core::mem::offset_of!(playdate_sprite, getImage) - 136usize];
    ["Offset of field: playdate_sprite::setSize"]
        [::core::mem::offset_of!(playdate_sprite, setSize) - 144usize];
    ["Offset of field: playdate_sprite::setZIndex"]
        [::core::mem::offset_of!(playdate_sprite, setZIndex) - 152usize];
    ["Offset of field: playdate_sprite::getZIndex"]
        [::core::mem::offset_of!(playdate_sprite, getZIndex) - 160usize];
    ["Offset of field: playdate_sprite::setDrawMode"]
        [::core::mem::offset_of!(playdate_sprite, setDrawMode) - 168usize];
    ["Offset of field: playdate_sprite::setImageFlip"]
        [::core::mem::offset_of!(playdate_sprite, setImageFlip) - 176usize];
    ["Offset of field: playdate_sprite::getImageFlip"]
        [::core::mem::offset_of!(playdate_sprite, getImageFlip) - 184usize];
    ["Offset of field: playdate_sprite::setStencil"]
        [::core::mem::offset_of!(playdate_sprite, setStencil) - 192usize];
    ["Offset of field: playdate_sprite::setClipRect"]
        [::core::mem::offset_of!(playdate_sprite, setClipRect) - 200usize];
    ["Offset of field: playdate_sprite::clearClipRect"]
        [::core::mem::offset_of!(playdate_sprite, clearClipRect) - 208usize];
    ["Offset of field: playdate_sprite::setClipRectsInRange"]
        [::core::mem::offset_of!(playdate_sprite, setClipRectsInRange) - 216usize];
    ["Offset of field: playdate_sprite::clearClipRectsInRange"]
        [::core::mem::offset_of!(playdate_sprite, clearClipRectsInRange) - 224usize];
    ["Offset of field: playdate_sprite::setUpdatesEnabled"]
        [::core::mem::offset_of!(playdate_sprite, setUpdatesEnabled) - 232usize];
    ["Offset of field: playdate_sprite::updatesEnabled"]
        [::core::mem::offset_of!(playdate_sprite, updatesEnabled) - 240usize];
    ["Offset of field: playdate_sprite::setCollisionsEnabled"]
        [::core::mem::offset_of!(playdate_sprite, setCollisionsEnabled) - 248usize];
    ["Offset of field: playdate_sprite::collisionsEnabled"]
        [::core::mem::offset_of!(playdate_sprite, collisionsEnabled) - 256usize];
    ["Offset of field: playdate_sprite::setVisible"]
        [::core::mem::offset_of!(playdate_sprite, setVisible) - 264usize];
    ["Offset of field: playdate_sprite::isVisible"]
        [::core::mem::offset_of!(playdate_sprite, isVisible) - 272usize];
    ["Offset of field: playdate_sprite::setOpaque"]
        [::core::mem::offset_of!(playdate_sprite, setOpaque) - 280usize];
    ["Offset of field: playdate_sprite::markDirty"]
        [::core::mem::offset_of!(playdate_sprite, markDirty) - 288usize];
    ["Offset of field: playdate_sprite::setTag"]
        [::core::mem::offset_of!(playdate_sprite, setTag) - 296usize];
    ["Offset of field: playdate_sprite::getTag"]
        [::core::mem::offset_of!(playdate_sprite, getTag) - 304usize];
    ["Offset of field: playdate_sprite::setIgnoresDrawOffset"]
        [::core::mem::offset_of!(playdate_sprite, setIgnoresDrawOffset) - 312usize];
    ["Offset of field: playdate_sprite::setUpdateFunction"]
        [::core::mem::offset_of!(playdate_sprite, setUpdateFunction) - 320usize];
    ["Offset of field: playdate_sprite::setDrawFunction"]
        [::core::mem::offset_of!(playdate_sprite, setDrawFunction) - 328usize];
    ["Offset of field: playdate_sprite::getPosition"]
        [::core::mem::offset_of!(playdate_sprite, getPosition) - 336usize];
    ["Offset of field: playdate_sprite::resetCollisionWorld"]
        [::core::mem::offset_of!(playdate_sprite, resetCollisionWorld) - 344usize];
    ["Offset of field: playdate_sprite::setCollideRect"]
        [::core::mem::offset_of!(playdate_sprite, setCollideRect) - 352usize];
    ["Offset of field: playdate_sprite::getCollideRect"]
        [::core::mem::offset_of!(playdate_sprite, getCollideRect) - 360usize];
    ["Offset of field: playdate_sprite::clearCollideRect"]
        [::core::mem::offset_of!(playdate_sprite, clearCollideRect) - 368usize];
    ["Offset of field: playdate_sprite::setCollisionResponseFunction"]
        [::core::mem::offset_of!(playdate_sprite, setCollisionResponseFunction) - 376usize];
    ["Offset of field: playdate_sprite::checkCollisions"]
        [::core::mem::offset_of!(playdate_sprite, checkCollisions) - 384usize];
    ["Offset of field: playdate_sprite::moveWithCollisions"]
        [::core::mem::offset_of!(playdate_sprite, moveWithCollisions) - 392usize];
    ["Offset of field: playdate_sprite::querySpritesAtPoint"]
        [::core::mem::offset_of!(playdate_sprite, querySpritesAtPoint) - 400usize];
    ["Offset of field: playdate_sprite::querySpritesInRect"]
        [::core::mem::offset_of!(playdate_sprite, querySpritesInRect) - 408usize];
    ["Offset of field: playdate_sprite::querySpritesAlongLine"]
        [::core::mem::offset_of!(playdate_sprite, querySpritesAlongLine) - 416usize];
    ["Offset of field: playdate_sprite::querySpriteInfoAlongLine"]
        [::core::mem::offset_of!(playdate_sprite, querySpriteInfoAlongLine) - 424usize];
    ["Offset of field: playdate_sprite::overlappingSprites"]
        [::core::mem::offset_of!(playdate_sprite, overlappingSprites) - 432usize];
    ["Offset of field: playdate_sprite::allOverlappingSprites"]
        [::core::mem::offset_of!(playdate_sprite, allOverlappingSprites) - 440usize];
    ["Offset of field: playdate_sprite::setStencilPattern"]
        [::core::mem::offset_of!(playdate_sprite, setStencilPattern) - 448usize];
    ["Offset of field: playdate_sprite::clearStencil"]
        [::core::mem::offset_of!(playdate_sprite, clearStencil) - 456usize];
    ["Offset of field: playdate_sprite::setUserdata"]
        [::core::mem::offset_of!(playdate_sprite, setUserdata) - 464usize];
    ["Offset of field: playdate_sprite::getUserdata"]
        [::core::mem::offset_of!(playdate_sprite, getUserdata) - 472usize];
    ["Offset of field: playdate_sprite::setStencilImage"]
        [::core::mem::offset_of!(playdate_sprite, setStencilImage) - 480usize];
    ["Offset of field: playdate_sprite::setCenter"]
        [::core::mem::offset_of!(playdate_sprite, setCenter) - 488usize];
    ["Offset of field: playdate_sprite::getCenter"]
        [::core::mem::offset_of!(playdate_sprite, getCenter) - 496usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SoundFormat {
    kSound8bitMono = 0,
    kSound8bitStereo = 1,
    kSound16bitMono = 2,
    kSound16bitStereo = 3,
    kSoundADPCMMono = 4,
    kSoundADPCMStereo = 5,
}
pub type MIDINote = f32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundSource {
    _unused: [u8; 0],
}
pub type sndCallbackProc = ::core::option::Option<
    unsafe extern "C" fn(c: *mut SoundSource, userdata: *mut ctypes::c_void),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_source {
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(c: *mut SoundSource, lvol: f32, rvol: f32)>,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(c: *mut SoundSource, outl: *mut f32, outr: *mut f32),
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(c: *mut SoundSource) -> ctypes::c_int>,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            c: *mut SoundSource,
            callback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_source"][::core::mem::size_of::<playdate_sound_source>() - 32usize];
    ["Alignment of playdate_sound_source"]
        [::core::mem::align_of::<playdate_sound_source>() - 8usize];
    ["Offset of field: playdate_sound_source::setVolume"]
        [::core::mem::offset_of!(playdate_sound_source, setVolume) - 0usize];
    ["Offset of field: playdate_sound_source::getVolume"]
        [::core::mem::offset_of!(playdate_sound_source, getVolume) - 8usize];
    ["Offset of field: playdate_sound_source::isPlaying"]
        [::core::mem::offset_of!(playdate_sound_source, isPlaying) - 16usize];
    ["Offset of field: playdate_sound_source::setFinishCallback"]
        [::core::mem::offset_of!(playdate_sound_source, setFinishCallback) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilePlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_fileplayer {
    pub newPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut FilePlayer>,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub loadIntoPlayer: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, path: *const ctypes::c_char) -> ctypes::c_int,
    >,
    pub setBufferLength:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, bufferLen: f32)>,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, repeat: ctypes::c_int) -> ctypes::c_int,
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> ctypes::c_int>,
    pub pause: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut FilePlayer, left: *mut f32, right: *mut f32),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub setOffset:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, offset: f32)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, rate: f32)>,
    pub setLoopRange:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, start: f32, end: f32)>,
    pub didUnderrun:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> ctypes::c_int>,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            callback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub setLoopCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            callback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub getOffset: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub getRate: ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer) -> f32>,
    pub setStopOnUnderrun:
        ::core::option::Option<unsafe extern "C" fn(player: *mut FilePlayer, flag: ctypes::c_int)>,
    pub fadeVolume: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            left: f32,
            right: f32,
            len: i32,
            finishCallback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub setMP3StreamSource: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut FilePlayer,
            dataSource: ::core::option::Option<
                unsafe extern "C" fn(
                    data: *mut u8,
                    bytes: ctypes::c_int,
                    userdata: *mut ctypes::c_void,
                ) -> ctypes::c_int,
            >,
            userdata: *mut ctypes::c_void,
            bufferLen: f32,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_fileplayer"]
        [::core::mem::size_of::<playdate_sound_fileplayer>() - 176usize];
    ["Alignment of playdate_sound_fileplayer"]
        [::core::mem::align_of::<playdate_sound_fileplayer>() - 8usize];
    ["Offset of field: playdate_sound_fileplayer::newPlayer"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, newPlayer) - 0usize];
    ["Offset of field: playdate_sound_fileplayer::freePlayer"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, freePlayer) - 8usize];
    ["Offset of field: playdate_sound_fileplayer::loadIntoPlayer"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, loadIntoPlayer) - 16usize];
    ["Offset of field: playdate_sound_fileplayer::setBufferLength"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setBufferLength) - 24usize];
    ["Offset of field: playdate_sound_fileplayer::play"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, play) - 32usize];
    ["Offset of field: playdate_sound_fileplayer::isPlaying"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, isPlaying) - 40usize];
    ["Offset of field: playdate_sound_fileplayer::pause"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, pause) - 48usize];
    ["Offset of field: playdate_sound_fileplayer::stop"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, stop) - 56usize];
    ["Offset of field: playdate_sound_fileplayer::setVolume"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setVolume) - 64usize];
    ["Offset of field: playdate_sound_fileplayer::getVolume"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, getVolume) - 72usize];
    ["Offset of field: playdate_sound_fileplayer::getLength"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, getLength) - 80usize];
    ["Offset of field: playdate_sound_fileplayer::setOffset"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setOffset) - 88usize];
    ["Offset of field: playdate_sound_fileplayer::setRate"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setRate) - 96usize];
    ["Offset of field: playdate_sound_fileplayer::setLoopRange"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setLoopRange) - 104usize];
    ["Offset of field: playdate_sound_fileplayer::didUnderrun"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, didUnderrun) - 112usize];
    ["Offset of field: playdate_sound_fileplayer::setFinishCallback"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setFinishCallback) - 120usize];
    ["Offset of field: playdate_sound_fileplayer::setLoopCallback"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setLoopCallback) - 128usize];
    ["Offset of field: playdate_sound_fileplayer::getOffset"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, getOffset) - 136usize];
    ["Offset of field: playdate_sound_fileplayer::getRate"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, getRate) - 144usize];
    ["Offset of field: playdate_sound_fileplayer::setStopOnUnderrun"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setStopOnUnderrun) - 152usize];
    ["Offset of field: playdate_sound_fileplayer::fadeVolume"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, fadeVolume) - 160usize];
    ["Offset of field: playdate_sound_fileplayer::setMP3StreamSource"]
        [::core::mem::offset_of!(playdate_sound_fileplayer, setMP3StreamSource) - 168usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioSample {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SamplePlayer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_sample {
    pub newSampleBuffer:
        ::core::option::Option<unsafe extern "C" fn(byteCount: ctypes::c_int) -> *mut AudioSample>,
    pub loadIntoSample: ::core::option::Option<
        unsafe extern "C" fn(
            sample: *mut AudioSample,
            path: *const ctypes::c_char,
        ) -> ctypes::c_int,
    >,
    pub load: ::core::option::Option<
        unsafe extern "C" fn(path: *const ctypes::c_char) -> *mut AudioSample,
    >,
    pub newSampleFromData: ::core::option::Option<
        unsafe extern "C" fn(
            data: *mut u8,
            format: SoundFormat,
            sampleRate: u32,
            byteCount: ctypes::c_int,
            shouldFreeData: ctypes::c_int,
        ) -> *mut AudioSample,
    >,
    pub getData: ::core::option::Option<
        unsafe extern "C" fn(
            sample: *mut AudioSample,
            data: *mut *mut u8,
            format: *mut SoundFormat,
            sampleRate: *mut u32,
            bytelength: *mut u32,
        ),
    >,
    pub freeSample: ::core::option::Option<unsafe extern "C" fn(sample: *mut AudioSample)>,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(sample: *mut AudioSample) -> f32>,
    pub decompress:
        ::core::option::Option<unsafe extern "C" fn(sample: *mut AudioSample) -> ctypes::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_sample"][::core::mem::size_of::<playdate_sound_sample>() - 64usize];
    ["Alignment of playdate_sound_sample"]
        [::core::mem::align_of::<playdate_sound_sample>() - 8usize];
    ["Offset of field: playdate_sound_sample::newSampleBuffer"]
        [::core::mem::offset_of!(playdate_sound_sample, newSampleBuffer) - 0usize];
    ["Offset of field: playdate_sound_sample::loadIntoSample"]
        [::core::mem::offset_of!(playdate_sound_sample, loadIntoSample) - 8usize];
    ["Offset of field: playdate_sound_sample::load"]
        [::core::mem::offset_of!(playdate_sound_sample, load) - 16usize];
    ["Offset of field: playdate_sound_sample::newSampleFromData"]
        [::core::mem::offset_of!(playdate_sound_sample, newSampleFromData) - 24usize];
    ["Offset of field: playdate_sound_sample::getData"]
        [::core::mem::offset_of!(playdate_sound_sample, getData) - 32usize];
    ["Offset of field: playdate_sound_sample::freeSample"]
        [::core::mem::offset_of!(playdate_sound_sample, freeSample) - 40usize];
    ["Offset of field: playdate_sound_sample::getLength"]
        [::core::mem::offset_of!(playdate_sound_sample, getLength) - 48usize];
    ["Offset of field: playdate_sound_sample::decompress"]
        [::core::mem::offset_of!(playdate_sound_sample, decompress) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_sampleplayer {
    pub newPlayer: ::core::option::Option<unsafe extern "C" fn() -> *mut SamplePlayer>,
    pub freePlayer: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer)>,
    pub setSample: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, sample: *mut AudioSample),
    >,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            repeat: ctypes::c_int,
            rate: f32,
        ) -> ctypes::c_int,
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> ctypes::c_int>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, left: *mut f32, right: *mut f32),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub setOffset:
        ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer, offset: f32)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer, rate: f32)>,
    pub setPlayRange: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, start: ctypes::c_int, end: ctypes::c_int),
    >,
    pub setFinishCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            callback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub setLoopCallback: ::core::option::Option<
        unsafe extern "C" fn(
            player: *mut SamplePlayer,
            callback: sndCallbackProc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub getOffset: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub getRate: ::core::option::Option<unsafe extern "C" fn(player: *mut SamplePlayer) -> f32>,
    pub setPaused: ::core::option::Option<
        unsafe extern "C" fn(player: *mut SamplePlayer, flag: ctypes::c_int),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_sampleplayer"]
        [::core::mem::size_of::<playdate_sound_sampleplayer>() - 136usize];
    ["Alignment of playdate_sound_sampleplayer"]
        [::core::mem::align_of::<playdate_sound_sampleplayer>() - 8usize];
    ["Offset of field: playdate_sound_sampleplayer::newPlayer"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, newPlayer) - 0usize];
    ["Offset of field: playdate_sound_sampleplayer::freePlayer"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, freePlayer) - 8usize];
    ["Offset of field: playdate_sound_sampleplayer::setSample"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setSample) - 16usize];
    ["Offset of field: playdate_sound_sampleplayer::play"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, play) - 24usize];
    ["Offset of field: playdate_sound_sampleplayer::isPlaying"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, isPlaying) - 32usize];
    ["Offset of field: playdate_sound_sampleplayer::stop"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, stop) - 40usize];
    ["Offset of field: playdate_sound_sampleplayer::setVolume"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setVolume) - 48usize];
    ["Offset of field: playdate_sound_sampleplayer::getVolume"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, getVolume) - 56usize];
    ["Offset of field: playdate_sound_sampleplayer::getLength"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, getLength) - 64usize];
    ["Offset of field: playdate_sound_sampleplayer::setOffset"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setOffset) - 72usize];
    ["Offset of field: playdate_sound_sampleplayer::setRate"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setRate) - 80usize];
    ["Offset of field: playdate_sound_sampleplayer::setPlayRange"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setPlayRange) - 88usize];
    ["Offset of field: playdate_sound_sampleplayer::setFinishCallback"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setFinishCallback) - 96usize];
    ["Offset of field: playdate_sound_sampleplayer::setLoopCallback"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setLoopCallback) - 104usize];
    ["Offset of field: playdate_sound_sampleplayer::getOffset"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, getOffset) - 112usize];
    ["Offset of field: playdate_sound_sampleplayer::getRate"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, getRate) - 120usize];
    ["Offset of field: playdate_sound_sampleplayer::setPaused"]
        [::core::mem::offset_of!(playdate_sound_sampleplayer, setPaused) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthSignalValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthSignal {
    _unused: [u8; 0],
}
pub type signalStepFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        ioframes: *mut ctypes::c_int,
        ifval: *mut f32,
    ) -> f32,
>;
pub type signalNoteOnFunc = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void, note: MIDINote, vel: f32, len: f32),
>;
pub type signalNoteOffFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        stopped: ctypes::c_int,
        offset: ctypes::c_int,
    ),
>;
pub type signalDeallocFunc =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ctypes::c_void)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_signal {
    pub newSignal: ::core::option::Option<
        unsafe extern "C" fn(
            step: signalStepFunc,
            noteOn: signalNoteOnFunc,
            noteOff: signalNoteOffFunc,
            dealloc: signalDeallocFunc,
            userdata: *mut ctypes::c_void,
        ) -> *mut PDSynthSignal,
    >,
    pub freeSignal: ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal)>,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal) -> f32>,
    pub setValueScale:
        ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal, scale: f32)>,
    pub setValueOffset:
        ::core::option::Option<unsafe extern "C" fn(signal: *mut PDSynthSignal, offset: f32)>,
    pub newSignalForValue: ::core::option::Option<
        unsafe extern "C" fn(value: *mut PDSynthSignalValue) -> *mut PDSynthSignal,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_signal"][::core::mem::size_of::<playdate_sound_signal>() - 48usize];
    ["Alignment of playdate_sound_signal"]
        [::core::mem::align_of::<playdate_sound_signal>() - 8usize];
    ["Offset of field: playdate_sound_signal::newSignal"]
        [::core::mem::offset_of!(playdate_sound_signal, newSignal) - 0usize];
    ["Offset of field: playdate_sound_signal::freeSignal"]
        [::core::mem::offset_of!(playdate_sound_signal, freeSignal) - 8usize];
    ["Offset of field: playdate_sound_signal::getValue"]
        [::core::mem::offset_of!(playdate_sound_signal, getValue) - 16usize];
    ["Offset of field: playdate_sound_signal::setValueScale"]
        [::core::mem::offset_of!(playdate_sound_signal, setValueScale) - 24usize];
    ["Offset of field: playdate_sound_signal::setValueOffset"]
        [::core::mem::offset_of!(playdate_sound_signal, setValueOffset) - 32usize];
    ["Offset of field: playdate_sound_signal::newSignalForValue"]
        [::core::mem::offset_of!(playdate_sound_signal, newSignalForValue) - 40usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LFOType {
    kLFOTypeSquare = 0,
    kLFOTypeTriangle = 1,
    kLFOTypeSine = 2,
    kLFOTypeSampleAndHold = 3,
    kLFOTypeSawtoothUp = 4,
    kLFOTypeSawtoothDown = 5,
    kLFOTypeArpeggiator = 6,
    kLFOTypeFunction = 7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthLFO {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_lfo {
    pub newLFO: ::core::option::Option<unsafe extern "C" fn(type_: LFOType) -> *mut PDSynthLFO>,
    pub freeLFO: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO)>,
    pub setType: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, type_: LFOType)>,
    pub setRate: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, rate: f32)>,
    pub setPhase: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, phase: f32)>,
    pub setCenter: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, center: f32)>,
    pub setDepth: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, depth: f32)>,
    pub setArpeggiation: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, nSteps: ctypes::c_int, steps: *mut f32),
    >,
    pub setFunction: ::core::option::Option<
        unsafe extern "C" fn(
            lfo: *mut PDSynthLFO,
            lfoFunc: ::core::option::Option<
                unsafe extern "C" fn(lfo: *mut PDSynthLFO, userdata: *mut ctypes::c_void) -> f32,
            >,
            userdata: *mut ctypes::c_void,
            interpolate: ctypes::c_int,
        ),
    >,
    pub setDelay: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthLFO, holdoff: f32, ramptime: f32),
    >,
    pub setRetrigger:
        ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, flag: ctypes::c_int)>,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO) -> f32>,
    pub setGlobal:
        ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, global: ctypes::c_int)>,
    pub setStartPhase:
        ::core::option::Option<unsafe extern "C" fn(lfo: *mut PDSynthLFO, phase: f32)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_lfo"][::core::mem::size_of::<playdate_sound_lfo>() - 112usize];
    ["Alignment of playdate_sound_lfo"][::core::mem::align_of::<playdate_sound_lfo>() - 8usize];
    ["Offset of field: playdate_sound_lfo::newLFO"]
        [::core::mem::offset_of!(playdate_sound_lfo, newLFO) - 0usize];
    ["Offset of field: playdate_sound_lfo::freeLFO"]
        [::core::mem::offset_of!(playdate_sound_lfo, freeLFO) - 8usize];
    ["Offset of field: playdate_sound_lfo::setType"]
        [::core::mem::offset_of!(playdate_sound_lfo, setType) - 16usize];
    ["Offset of field: playdate_sound_lfo::setRate"]
        [::core::mem::offset_of!(playdate_sound_lfo, setRate) - 24usize];
    ["Offset of field: playdate_sound_lfo::setPhase"]
        [::core::mem::offset_of!(playdate_sound_lfo, setPhase) - 32usize];
    ["Offset of field: playdate_sound_lfo::setCenter"]
        [::core::mem::offset_of!(playdate_sound_lfo, setCenter) - 40usize];
    ["Offset of field: playdate_sound_lfo::setDepth"]
        [::core::mem::offset_of!(playdate_sound_lfo, setDepth) - 48usize];
    ["Offset of field: playdate_sound_lfo::setArpeggiation"]
        [::core::mem::offset_of!(playdate_sound_lfo, setArpeggiation) - 56usize];
    ["Offset of field: playdate_sound_lfo::setFunction"]
        [::core::mem::offset_of!(playdate_sound_lfo, setFunction) - 64usize];
    ["Offset of field: playdate_sound_lfo::setDelay"]
        [::core::mem::offset_of!(playdate_sound_lfo, setDelay) - 72usize];
    ["Offset of field: playdate_sound_lfo::setRetrigger"]
        [::core::mem::offset_of!(playdate_sound_lfo, setRetrigger) - 80usize];
    ["Offset of field: playdate_sound_lfo::getValue"]
        [::core::mem::offset_of!(playdate_sound_lfo, getValue) - 88usize];
    ["Offset of field: playdate_sound_lfo::setGlobal"]
        [::core::mem::offset_of!(playdate_sound_lfo, setGlobal) - 96usize];
    ["Offset of field: playdate_sound_lfo::setStartPhase"]
        [::core::mem::offset_of!(playdate_sound_lfo, setStartPhase) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthEnvelope {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_envelope {
    pub newEnvelope: ::core::option::Option<
        unsafe extern "C" fn(
            attack: f32,
            decay: f32,
            sustain: f32,
            release: f32,
        ) -> *mut PDSynthEnvelope,
    >,
    pub freeEnvelope: ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope)>,
    pub setAttack:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, attack: f32)>,
    pub setDecay:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, decay: f32)>,
    pub setSustain:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, sustain: f32)>,
    pub setRelease:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, release: f32)>,
    pub setLegato: ::core::option::Option<
        unsafe extern "C" fn(env: *mut PDSynthEnvelope, flag: ctypes::c_int),
    >,
    pub setRetrigger: ::core::option::Option<
        unsafe extern "C" fn(lfo: *mut PDSynthEnvelope, flag: ctypes::c_int),
    >,
    pub getValue: ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope) -> f32>,
    pub setCurvature:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, amount: f32)>,
    pub setVelocitySensitivity:
        ::core::option::Option<unsafe extern "C" fn(env: *mut PDSynthEnvelope, velsens: f32)>,
    pub setRateScaling: ::core::option::Option<
        unsafe extern "C" fn(
            env: *mut PDSynthEnvelope,
            scaling: f32,
            start: MIDINote,
            end: MIDINote,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_envelope"]
        [::core::mem::size_of::<playdate_sound_envelope>() - 96usize];
    ["Alignment of playdate_sound_envelope"]
        [::core::mem::align_of::<playdate_sound_envelope>() - 8usize];
    ["Offset of field: playdate_sound_envelope::newEnvelope"]
        [::core::mem::offset_of!(playdate_sound_envelope, newEnvelope) - 0usize];
    ["Offset of field: playdate_sound_envelope::freeEnvelope"]
        [::core::mem::offset_of!(playdate_sound_envelope, freeEnvelope) - 8usize];
    ["Offset of field: playdate_sound_envelope::setAttack"]
        [::core::mem::offset_of!(playdate_sound_envelope, setAttack) - 16usize];
    ["Offset of field: playdate_sound_envelope::setDecay"]
        [::core::mem::offset_of!(playdate_sound_envelope, setDecay) - 24usize];
    ["Offset of field: playdate_sound_envelope::setSustain"]
        [::core::mem::offset_of!(playdate_sound_envelope, setSustain) - 32usize];
    ["Offset of field: playdate_sound_envelope::setRelease"]
        [::core::mem::offset_of!(playdate_sound_envelope, setRelease) - 40usize];
    ["Offset of field: playdate_sound_envelope::setLegato"]
        [::core::mem::offset_of!(playdate_sound_envelope, setLegato) - 48usize];
    ["Offset of field: playdate_sound_envelope::setRetrigger"]
        [::core::mem::offset_of!(playdate_sound_envelope, setRetrigger) - 56usize];
    ["Offset of field: playdate_sound_envelope::getValue"]
        [::core::mem::offset_of!(playdate_sound_envelope, getValue) - 64usize];
    ["Offset of field: playdate_sound_envelope::setCurvature"]
        [::core::mem::offset_of!(playdate_sound_envelope, setCurvature) - 72usize];
    ["Offset of field: playdate_sound_envelope::setVelocitySensitivity"]
        [::core::mem::offset_of!(playdate_sound_envelope, setVelocitySensitivity) - 80usize];
    ["Offset of field: playdate_sound_envelope::setRateScaling"]
        [::core::mem::offset_of!(playdate_sound_envelope, setRateScaling) - 88usize];
};
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SoundWaveform {
    kWaveformSquare = 0,
    kWaveformTriangle = 1,
    kWaveformSine = 2,
    kWaveformNoise = 3,
    kWaveformSawtooth = 4,
    kWaveformPOPhase = 5,
    kWaveformPODigital = 6,
    kWaveformPOVosim = 7,
}
pub type synthRenderFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        left: *mut i32,
        right: *mut i32,
        nsamples: ctypes::c_int,
        rate: u32,
        drate: i32,
    ) -> ctypes::c_int,
>;
pub type synthNoteOnFunc = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void, note: MIDINote, velocity: f32, len: f32),
>;
pub type synthReleaseFunc = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void, stop: ctypes::c_int),
>;
pub type synthSetParameterFunc = ::core::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ctypes::c_void,
        parameter: ctypes::c_int,
        value: f32,
    ) -> ctypes::c_int,
>;
pub type synthDeallocFunc =
    ::core::option::Option<unsafe extern "C" fn(userdata: *mut ctypes::c_void)>;
pub type synthCopyUserdata = ::core::option::Option<
    unsafe extern "C" fn(userdata: *mut ctypes::c_void) -> *mut ctypes::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynth {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_synth {
    pub newSynth: ::core::option::Option<unsafe extern "C" fn() -> *mut PDSynth>,
    pub freeSynth: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth)>,
    pub setWaveform:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, wave: SoundWaveform)>,
    pub setGenerator_deprecated: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            stereo: ctypes::c_int,
            render: synthRenderFunc,
            noteOn: synthNoteOnFunc,
            release: synthReleaseFunc,
            setparam: synthSetParameterFunc,
            dealloc: synthDeallocFunc,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub setSample: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            sample: *mut AudioSample,
            sustainStart: u32,
            sustainEnd: u32,
        ),
    >,
    pub setAttackTime:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, attack: f32)>,
    pub setDecayTime: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, decay: f32)>,
    pub setSustainLevel:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, sustain: f32)>,
    pub setReleaseTime:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, release: f32)>,
    pub setTranspose:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, halfSteps: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, mod_: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthSignalValue,
    >,
    pub setAmplitudeModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, mod_: *mut PDSynthSignalValue),
    >,
    pub getAmplitudeModulator: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthSignalValue,
    >,
    pub getParameterCount:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> ctypes::c_int>,
    pub setParameter: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ctypes::c_int,
            value: f32,
        ) -> ctypes::c_int,
    >,
    pub setParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ctypes::c_int,
            mod_: *mut PDSynthSignalValue,
        ),
    >,
    pub getParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            parameter: ctypes::c_int,
        ) -> *mut PDSynthSignalValue,
    >,
    pub playNote: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, freq: f32, vel: f32, len: f32, when: u32),
    >,
    pub playMIDINote: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, note: MIDINote, vel: f32, len: f32, when: u32),
    >,
    pub noteOff: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, when: u32)>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth)>,
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth, left: f32, right: f32)>,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(synth: *mut PDSynth, left: *mut f32, right: *mut f32),
    >,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> ctypes::c_int>,
    pub getEnvelope:
        ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynthEnvelope>,
    pub setWavetable: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            sample: *mut AudioSample,
            log2size: ctypes::c_int,
            columns: ctypes::c_int,
            rows: ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub setGenerator: ::core::option::Option<
        unsafe extern "C" fn(
            synth: *mut PDSynth,
            stereo: ctypes::c_int,
            render: synthRenderFunc,
            noteOn: synthNoteOnFunc,
            release: synthReleaseFunc,
            setparam: synthSetParameterFunc,
            dealloc: synthDeallocFunc,
            copyUserdata: synthCopyUserdata,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub copy: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth) -> *mut PDSynth>,
    pub clearEnvelope: ::core::option::Option<unsafe extern "C" fn(synth: *mut PDSynth)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_synth"][::core::mem::size_of::<playdate_sound_synth>() - 240usize];
    ["Alignment of playdate_sound_synth"][::core::mem::align_of::<playdate_sound_synth>() - 8usize];
    ["Offset of field: playdate_sound_synth::newSynth"]
        [::core::mem::offset_of!(playdate_sound_synth, newSynth) - 0usize];
    ["Offset of field: playdate_sound_synth::freeSynth"]
        [::core::mem::offset_of!(playdate_sound_synth, freeSynth) - 8usize];
    ["Offset of field: playdate_sound_synth::setWaveform"]
        [::core::mem::offset_of!(playdate_sound_synth, setWaveform) - 16usize];
    ["Offset of field: playdate_sound_synth::setGenerator_deprecated"]
        [::core::mem::offset_of!(playdate_sound_synth, setGenerator_deprecated) - 24usize];
    ["Offset of field: playdate_sound_synth::setSample"]
        [::core::mem::offset_of!(playdate_sound_synth, setSample) - 32usize];
    ["Offset of field: playdate_sound_synth::setAttackTime"]
        [::core::mem::offset_of!(playdate_sound_synth, setAttackTime) - 40usize];
    ["Offset of field: playdate_sound_synth::setDecayTime"]
        [::core::mem::offset_of!(playdate_sound_synth, setDecayTime) - 48usize];
    ["Offset of field: playdate_sound_synth::setSustainLevel"]
        [::core::mem::offset_of!(playdate_sound_synth, setSustainLevel) - 56usize];
    ["Offset of field: playdate_sound_synth::setReleaseTime"]
        [::core::mem::offset_of!(playdate_sound_synth, setReleaseTime) - 64usize];
    ["Offset of field: playdate_sound_synth::setTranspose"]
        [::core::mem::offset_of!(playdate_sound_synth, setTranspose) - 72usize];
    ["Offset of field: playdate_sound_synth::setFrequencyModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, setFrequencyModulator) - 80usize];
    ["Offset of field: playdate_sound_synth::getFrequencyModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, getFrequencyModulator) - 88usize];
    ["Offset of field: playdate_sound_synth::setAmplitudeModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, setAmplitudeModulator) - 96usize];
    ["Offset of field: playdate_sound_synth::getAmplitudeModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, getAmplitudeModulator) - 104usize];
    ["Offset of field: playdate_sound_synth::getParameterCount"]
        [::core::mem::offset_of!(playdate_sound_synth, getParameterCount) - 112usize];
    ["Offset of field: playdate_sound_synth::setParameter"]
        [::core::mem::offset_of!(playdate_sound_synth, setParameter) - 120usize];
    ["Offset of field: playdate_sound_synth::setParameterModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, setParameterModulator) - 128usize];
    ["Offset of field: playdate_sound_synth::getParameterModulator"]
        [::core::mem::offset_of!(playdate_sound_synth, getParameterModulator) - 136usize];
    ["Offset of field: playdate_sound_synth::playNote"]
        [::core::mem::offset_of!(playdate_sound_synth, playNote) - 144usize];
    ["Offset of field: playdate_sound_synth::playMIDINote"]
        [::core::mem::offset_of!(playdate_sound_synth, playMIDINote) - 152usize];
    ["Offset of field: playdate_sound_synth::noteOff"]
        [::core::mem::offset_of!(playdate_sound_synth, noteOff) - 160usize];
    ["Offset of field: playdate_sound_synth::stop"]
        [::core::mem::offset_of!(playdate_sound_synth, stop) - 168usize];
    ["Offset of field: playdate_sound_synth::setVolume"]
        [::core::mem::offset_of!(playdate_sound_synth, setVolume) - 176usize];
    ["Offset of field: playdate_sound_synth::getVolume"]
        [::core::mem::offset_of!(playdate_sound_synth, getVolume) - 184usize];
    ["Offset of field: playdate_sound_synth::isPlaying"]
        [::core::mem::offset_of!(playdate_sound_synth, isPlaying) - 192usize];
    ["Offset of field: playdate_sound_synth::getEnvelope"]
        [::core::mem::offset_of!(playdate_sound_synth, getEnvelope) - 200usize];
    ["Offset of field: playdate_sound_synth::setWavetable"]
        [::core::mem::offset_of!(playdate_sound_synth, setWavetable) - 208usize];
    ["Offset of field: playdate_sound_synth::setGenerator"]
        [::core::mem::offset_of!(playdate_sound_synth, setGenerator) - 216usize];
    ["Offset of field: playdate_sound_synth::copy"]
        [::core::mem::offset_of!(playdate_sound_synth, copy) - 224usize];
    ["Offset of field: playdate_sound_synth::clearEnvelope"]
        [::core::mem::offset_of!(playdate_sound_synth, clearEnvelope) - 232usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ControlSignal {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_control_signal {
    pub newSignal: ::core::option::Option<unsafe extern "C" fn() -> *mut ControlSignal>,
    pub freeSignal: ::core::option::Option<unsafe extern "C" fn(signal: *mut ControlSignal)>,
    pub clearEvents: ::core::option::Option<unsafe extern "C" fn(control: *mut ControlSignal)>,
    pub addEvent: ::core::option::Option<
        unsafe extern "C" fn(
            control: *mut ControlSignal,
            step: ctypes::c_int,
            value: f32,
            interpolate: ctypes::c_int,
        ),
    >,
    pub removeEvent: ::core::option::Option<
        unsafe extern "C" fn(control: *mut ControlSignal, step: ctypes::c_int),
    >,
    pub getMIDIControllerNumber:
        ::core::option::Option<unsafe extern "C" fn(control: *mut ControlSignal) -> ctypes::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_control_signal"]
        [::core::mem::size_of::<playdate_control_signal>() - 48usize];
    ["Alignment of playdate_control_signal"]
        [::core::mem::align_of::<playdate_control_signal>() - 8usize];
    ["Offset of field: playdate_control_signal::newSignal"]
        [::core::mem::offset_of!(playdate_control_signal, newSignal) - 0usize];
    ["Offset of field: playdate_control_signal::freeSignal"]
        [::core::mem::offset_of!(playdate_control_signal, freeSignal) - 8usize];
    ["Offset of field: playdate_control_signal::clearEvents"]
        [::core::mem::offset_of!(playdate_control_signal, clearEvents) - 16usize];
    ["Offset of field: playdate_control_signal::addEvent"]
        [::core::mem::offset_of!(playdate_control_signal, addEvent) - 24usize];
    ["Offset of field: playdate_control_signal::removeEvent"]
        [::core::mem::offset_of!(playdate_control_signal, removeEvent) - 32usize];
    ["Offset of field: playdate_control_signal::getMIDIControllerNumber"]
        [::core::mem::offset_of!(playdate_control_signal, getMIDIControllerNumber) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDSynthInstrument {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_instrument {
    pub newInstrument: ::core::option::Option<unsafe extern "C" fn() -> *mut PDSynthInstrument>,
    pub freeInstrument: ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument)>,
    pub addVoice: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            synth: *mut PDSynth,
            rangeStart: MIDINote,
            rangeEnd: MIDINote,
            transpose: f32,
        ) -> ctypes::c_int,
    >,
    pub playNote: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            frequency: f32,
            vel: f32,
            len: f32,
            when: u32,
        ) -> *mut PDSynth,
    >,
    pub playMIDINote: ::core::option::Option<
        unsafe extern "C" fn(
            inst: *mut PDSynthInstrument,
            note: MIDINote,
            vel: f32,
            len: f32,
            when: u32,
        ) -> *mut PDSynth,
    >,
    pub setPitchBend:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, bend: f32)>,
    pub setPitchBendRange:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, halfSteps: f32)>,
    pub setTranspose:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, halfSteps: f32)>,
    pub noteOff: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, note: MIDINote, when: u32),
    >,
    pub allNotesOff:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument, when: u32)>,
    pub setVolume: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, left: f32, right: f32),
    >,
    pub getVolume: ::core::option::Option<
        unsafe extern "C" fn(inst: *mut PDSynthInstrument, left: *mut f32, right: *mut f32),
    >,
    pub activeVoiceCount:
        ::core::option::Option<unsafe extern "C" fn(inst: *mut PDSynthInstrument) -> ctypes::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_instrument"]
        [::core::mem::size_of::<playdate_sound_instrument>() - 104usize];
    ["Alignment of playdate_sound_instrument"]
        [::core::mem::align_of::<playdate_sound_instrument>() - 8usize];
    ["Offset of field: playdate_sound_instrument::newInstrument"]
        [::core::mem::offset_of!(playdate_sound_instrument, newInstrument) - 0usize];
    ["Offset of field: playdate_sound_instrument::freeInstrument"]
        [::core::mem::offset_of!(playdate_sound_instrument, freeInstrument) - 8usize];
    ["Offset of field: playdate_sound_instrument::addVoice"]
        [::core::mem::offset_of!(playdate_sound_instrument, addVoice) - 16usize];
    ["Offset of field: playdate_sound_instrument::playNote"]
        [::core::mem::offset_of!(playdate_sound_instrument, playNote) - 24usize];
    ["Offset of field: playdate_sound_instrument::playMIDINote"]
        [::core::mem::offset_of!(playdate_sound_instrument, playMIDINote) - 32usize];
    ["Offset of field: playdate_sound_instrument::setPitchBend"]
        [::core::mem::offset_of!(playdate_sound_instrument, setPitchBend) - 40usize];
    ["Offset of field: playdate_sound_instrument::setPitchBendRange"]
        [::core::mem::offset_of!(playdate_sound_instrument, setPitchBendRange) - 48usize];
    ["Offset of field: playdate_sound_instrument::setTranspose"]
        [::core::mem::offset_of!(playdate_sound_instrument, setTranspose) - 56usize];
    ["Offset of field: playdate_sound_instrument::noteOff"]
        [::core::mem::offset_of!(playdate_sound_instrument, noteOff) - 64usize];
    ["Offset of field: playdate_sound_instrument::allNotesOff"]
        [::core::mem::offset_of!(playdate_sound_instrument, allNotesOff) - 72usize];
    ["Offset of field: playdate_sound_instrument::setVolume"]
        [::core::mem::offset_of!(playdate_sound_instrument, setVolume) - 80usize];
    ["Offset of field: playdate_sound_instrument::getVolume"]
        [::core::mem::offset_of!(playdate_sound_instrument, getVolume) - 88usize];
    ["Offset of field: playdate_sound_instrument::activeVoiceCount"]
        [::core::mem::offset_of!(playdate_sound_instrument, activeVoiceCount) - 96usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SequenceTrack {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_track {
    pub newTrack: ::core::option::Option<unsafe extern "C" fn() -> *mut SequenceTrack>,
    pub freeTrack: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub setInstrument: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, inst: *mut PDSynthInstrument),
    >,
    pub getInstrument: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack) -> *mut PDSynthInstrument,
    >,
    pub addNoteEvent: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            step: u32,
            len: u32,
            note: MIDINote,
            velocity: f32,
        ),
    >,
    pub removeNoteEvent: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, step: u32, note: MIDINote),
    >,
    pub clearNotes: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub getControlSignalCount:
        ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack) -> ctypes::c_int>,
    pub getControlSignal: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, idx: ctypes::c_int) -> *mut ControlSignal,
    >,
    pub clearControlEvents: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack)>,
    pub getPolyphony:
        ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack) -> ctypes::c_int>,
    pub activeVoiceCount:
        ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack) -> ctypes::c_int>,
    pub setMuted: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, mute: ctypes::c_int),
    >,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(track: *mut SequenceTrack) -> u32>,
    pub getIndexForStep: ::core::option::Option<
        unsafe extern "C" fn(track: *mut SequenceTrack, step: u32) -> ctypes::c_int,
    >,
    pub getNoteAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            index: ctypes::c_int,
            outStep: *mut u32,
            outLen: *mut u32,
            outNote: *mut MIDINote,
            outVelocity: *mut f32,
        ) -> ctypes::c_int,
    >,
    pub getSignalForController: ::core::option::Option<
        unsafe extern "C" fn(
            track: *mut SequenceTrack,
            controller: ctypes::c_int,
            create: ctypes::c_int,
        ) -> *mut ControlSignal,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_track"][::core::mem::size_of::<playdate_sound_track>() - 136usize];
    ["Alignment of playdate_sound_track"][::core::mem::align_of::<playdate_sound_track>() - 8usize];
    ["Offset of field: playdate_sound_track::newTrack"]
        [::core::mem::offset_of!(playdate_sound_track, newTrack) - 0usize];
    ["Offset of field: playdate_sound_track::freeTrack"]
        [::core::mem::offset_of!(playdate_sound_track, freeTrack) - 8usize];
    ["Offset of field: playdate_sound_track::setInstrument"]
        [::core::mem::offset_of!(playdate_sound_track, setInstrument) - 16usize];
    ["Offset of field: playdate_sound_track::getInstrument"]
        [::core::mem::offset_of!(playdate_sound_track, getInstrument) - 24usize];
    ["Offset of field: playdate_sound_track::addNoteEvent"]
        [::core::mem::offset_of!(playdate_sound_track, addNoteEvent) - 32usize];
    ["Offset of field: playdate_sound_track::removeNoteEvent"]
        [::core::mem::offset_of!(playdate_sound_track, removeNoteEvent) - 40usize];
    ["Offset of field: playdate_sound_track::clearNotes"]
        [::core::mem::offset_of!(playdate_sound_track, clearNotes) - 48usize];
    ["Offset of field: playdate_sound_track::getControlSignalCount"]
        [::core::mem::offset_of!(playdate_sound_track, getControlSignalCount) - 56usize];
    ["Offset of field: playdate_sound_track::getControlSignal"]
        [::core::mem::offset_of!(playdate_sound_track, getControlSignal) - 64usize];
    ["Offset of field: playdate_sound_track::clearControlEvents"]
        [::core::mem::offset_of!(playdate_sound_track, clearControlEvents) - 72usize];
    ["Offset of field: playdate_sound_track::getPolyphony"]
        [::core::mem::offset_of!(playdate_sound_track, getPolyphony) - 80usize];
    ["Offset of field: playdate_sound_track::activeVoiceCount"]
        [::core::mem::offset_of!(playdate_sound_track, activeVoiceCount) - 88usize];
    ["Offset of field: playdate_sound_track::setMuted"]
        [::core::mem::offset_of!(playdate_sound_track, setMuted) - 96usize];
    ["Offset of field: playdate_sound_track::getLength"]
        [::core::mem::offset_of!(playdate_sound_track, getLength) - 104usize];
    ["Offset of field: playdate_sound_track::getIndexForStep"]
        [::core::mem::offset_of!(playdate_sound_track, getIndexForStep) - 112usize];
    ["Offset of field: playdate_sound_track::getNoteAtIndex"]
        [::core::mem::offset_of!(playdate_sound_track, getNoteAtIndex) - 120usize];
    ["Offset of field: playdate_sound_track::getSignalForController"]
        [::core::mem::offset_of!(playdate_sound_track, getSignalForController) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundSequence {
    _unused: [u8; 0],
}
pub type SequenceFinishedCallback = ::core::option::Option<
    unsafe extern "C" fn(seq: *mut SoundSequence, userdata: *mut ctypes::c_void),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_sequence {
    pub newSequence: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundSequence>,
    pub freeSequence: ::core::option::Option<unsafe extern "C" fn(sequence: *mut SoundSequence)>,
    pub loadMIDIFile: ::core::option::Option<
        unsafe extern "C" fn(seq: *mut SoundSequence, path: *const ctypes::c_char) -> ctypes::c_int,
    >,
    pub getTime: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> u32>,
    pub setTime: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence, time: u32)>,
    pub setLoops: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            loopstart: ctypes::c_int,
            loopend: ctypes::c_int,
            loops: ctypes::c_int,
        ),
    >,
    pub getTempo_deprecated:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ctypes::c_int>,
    pub setTempo:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence, stepsPerSecond: f32)>,
    pub getTrackCount:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ctypes::c_int>,
    pub addTrack:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> *mut SequenceTrack>,
    pub getTrackAtIndex: ::core::option::Option<
        unsafe extern "C" fn(seq: *mut SoundSequence, track: ctypes::c_uint) -> *mut SequenceTrack,
    >,
    pub setTrackAtIndex: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            track: *mut SequenceTrack,
            idx: ctypes::c_uint,
        ),
    >,
    pub allNotesOff: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence)>,
    pub isPlaying:
        ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> ctypes::c_int>,
    pub getLength: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> u32>,
    pub play: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            finishCallback: SequenceFinishedCallback,
            userdata: *mut ctypes::c_void,
        ),
    >,
    pub stop: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence)>,
    pub getCurrentStep: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            timeOffset: *mut ctypes::c_int,
        ) -> ctypes::c_int,
    >,
    pub setCurrentStep: ::core::option::Option<
        unsafe extern "C" fn(
            seq: *mut SoundSequence,
            step: ctypes::c_int,
            timeOffset: ctypes::c_int,
            playNotes: ctypes::c_int,
        ),
    >,
    pub getTempo: ::core::option::Option<unsafe extern "C" fn(seq: *mut SoundSequence) -> f32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_sequence"]
        [::core::mem::size_of::<playdate_sound_sequence>() - 160usize];
    ["Alignment of playdate_sound_sequence"]
        [::core::mem::align_of::<playdate_sound_sequence>() - 8usize];
    ["Offset of field: playdate_sound_sequence::newSequence"]
        [::core::mem::offset_of!(playdate_sound_sequence, newSequence) - 0usize];
    ["Offset of field: playdate_sound_sequence::freeSequence"]
        [::core::mem::offset_of!(playdate_sound_sequence, freeSequence) - 8usize];
    ["Offset of field: playdate_sound_sequence::loadMIDIFile"]
        [::core::mem::offset_of!(playdate_sound_sequence, loadMIDIFile) - 16usize];
    ["Offset of field: playdate_sound_sequence::getTime"]
        [::core::mem::offset_of!(playdate_sound_sequence, getTime) - 24usize];
    ["Offset of field: playdate_sound_sequence::setTime"]
        [::core::mem::offset_of!(playdate_sound_sequence, setTime) - 32usize];
    ["Offset of field: playdate_sound_sequence::setLoops"]
        [::core::mem::offset_of!(playdate_sound_sequence, setLoops) - 40usize];
    ["Offset of field: playdate_sound_sequence::getTempo_deprecated"]
        [::core::mem::offset_of!(playdate_sound_sequence, getTempo_deprecated) - 48usize];
    ["Offset of field: playdate_sound_sequence::setTempo"]
        [::core::mem::offset_of!(playdate_sound_sequence, setTempo) - 56usize];
    ["Offset of field: playdate_sound_sequence::getTrackCount"]
        [::core::mem::offset_of!(playdate_sound_sequence, getTrackCount) - 64usize];
    ["Offset of field: playdate_sound_sequence::addTrack"]
        [::core::mem::offset_of!(playdate_sound_sequence, addTrack) - 72usize];
    ["Offset of field: playdate_sound_sequence::getTrackAtIndex"]
        [::core::mem::offset_of!(playdate_sound_sequence, getTrackAtIndex) - 80usize];
    ["Offset of field: playdate_sound_sequence::setTrackAtIndex"]
        [::core::mem::offset_of!(playdate_sound_sequence, setTrackAtIndex) - 88usize];
    ["Offset of field: playdate_sound_sequence::allNotesOff"]
        [::core::mem::offset_of!(playdate_sound_sequence, allNotesOff) - 96usize];
    ["Offset of field: playdate_sound_sequence::isPlaying"]
        [::core::mem::offset_of!(playdate_sound_sequence, isPlaying) - 104usize];
    ["Offset of field: playdate_sound_sequence::getLength"]
        [::core::mem::offset_of!(playdate_sound_sequence, getLength) - 112usize];
    ["Offset of field: playdate_sound_sequence::play"]
        [::core::mem::offset_of!(playdate_sound_sequence, play) - 120usize];
    ["Offset of field: playdate_sound_sequence::stop"]
        [::core::mem::offset_of!(playdate_sound_sequence, stop) - 128usize];
    ["Offset of field: playdate_sound_sequence::getCurrentStep"]
        [::core::mem::offset_of!(playdate_sound_sequence, getCurrentStep) - 136usize];
    ["Offset of field: playdate_sound_sequence::setCurrentStep"]
        [::core::mem::offset_of!(playdate_sound_sequence, setCurrentStep) - 144usize];
    ["Offset of field: playdate_sound_sequence::getTempo"]
        [::core::mem::offset_of!(playdate_sound_sequence, getTempo) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TwoPoleFilter {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TwoPoleFilterType {
    kFilterTypeLowPass = 0,
    kFilterTypeHighPass = 1,
    kFilterTypeBandPass = 2,
    kFilterTypeNotch = 3,
    kFilterTypePEQ = 4,
    kFilterTypeLowShelf = 5,
    kFilterTypeHighShelf = 6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_twopolefilter {
    pub newFilter: ::core::option::Option<unsafe extern "C" fn() -> *mut TwoPoleFilter>,
    pub freeFilter: ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter)>,
    pub setType: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, type_: TwoPoleFilterType),
    >,
    pub setFrequency:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, frequency: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter) -> *mut PDSynthSignalValue,
    >,
    pub setGain:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, gain: f32)>,
    pub setResonance:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut TwoPoleFilter, resonance: f32)>,
    pub setResonanceModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getResonanceModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut TwoPoleFilter) -> *mut PDSynthSignalValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_twopolefilter"]
        [::core::mem::size_of::<playdate_sound_effect_twopolefilter>() - 80usize];
    ["Alignment of playdate_sound_effect_twopolefilter"]
        [::core::mem::align_of::<playdate_sound_effect_twopolefilter>() - 8usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::newFilter"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, newFilter) - 0usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::freeFilter"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, freeFilter) - 8usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setType"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, setType) - 16usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setFrequency"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, setFrequency) - 24usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setFrequencyModulator"][::core::mem::offset_of!(
        playdate_sound_effect_twopolefilter,
        setFrequencyModulator
    ) - 32usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::getFrequencyModulator"][::core::mem::offset_of!(
        playdate_sound_effect_twopolefilter,
        getFrequencyModulator
    ) - 40usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setGain"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, setGain) - 48usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setResonance"]
        [::core::mem::offset_of!(playdate_sound_effect_twopolefilter, setResonance) - 56usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::setResonanceModulator"][::core::mem::offset_of!(
        playdate_sound_effect_twopolefilter,
        setResonanceModulator
    ) - 64usize];
    ["Offset of field: playdate_sound_effect_twopolefilter::getResonanceModulator"][::core::mem::offset_of!(
        playdate_sound_effect_twopolefilter,
        getResonanceModulator
    ) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OnePoleFilter {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_onepolefilter {
    pub newFilter: ::core::option::Option<unsafe extern "C" fn() -> *mut OnePoleFilter>,
    pub freeFilter: ::core::option::Option<unsafe extern "C" fn(filter: *mut OnePoleFilter)>,
    pub setParameter:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut OnePoleFilter, parameter: f32)>,
    pub setParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut OnePoleFilter, signal: *mut PDSynthSignalValue),
    >,
    pub getParameterModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut OnePoleFilter) -> *mut PDSynthSignalValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_onepolefilter"]
        [::core::mem::size_of::<playdate_sound_effect_onepolefilter>() - 40usize];
    ["Alignment of playdate_sound_effect_onepolefilter"]
        [::core::mem::align_of::<playdate_sound_effect_onepolefilter>() - 8usize];
    ["Offset of field: playdate_sound_effect_onepolefilter::newFilter"]
        [::core::mem::offset_of!(playdate_sound_effect_onepolefilter, newFilter) - 0usize];
    ["Offset of field: playdate_sound_effect_onepolefilter::freeFilter"]
        [::core::mem::offset_of!(playdate_sound_effect_onepolefilter, freeFilter) - 8usize];
    ["Offset of field: playdate_sound_effect_onepolefilter::setParameter"]
        [::core::mem::offset_of!(playdate_sound_effect_onepolefilter, setParameter) - 16usize];
    ["Offset of field: playdate_sound_effect_onepolefilter::setParameterModulator"][::core::mem::offset_of!(
        playdate_sound_effect_onepolefilter,
        setParameterModulator
    ) - 24usize];
    ["Offset of field: playdate_sound_effect_onepolefilter::getParameterModulator"][::core::mem::offset_of!(
        playdate_sound_effect_onepolefilter,
        getParameterModulator
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitCrusher {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_bitcrusher {
    pub newBitCrusher: ::core::option::Option<unsafe extern "C" fn() -> *mut BitCrusher>,
    pub freeBitCrusher: ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher)>,
    pub setAmount:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher, amount: f32)>,
    pub setAmountModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher, signal: *mut PDSynthSignalValue),
    >,
    pub getAmountModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher) -> *mut PDSynthSignalValue,
    >,
    pub setUndersampling:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut BitCrusher, undersampling: f32)>,
    pub setUndersampleModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher, signal: *mut PDSynthSignalValue),
    >,
    pub getUndersampleModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut BitCrusher) -> *mut PDSynthSignalValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_bitcrusher"]
        [::core::mem::size_of::<playdate_sound_effect_bitcrusher>() - 64usize];
    ["Alignment of playdate_sound_effect_bitcrusher"]
        [::core::mem::align_of::<playdate_sound_effect_bitcrusher>() - 8usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::newBitCrusher"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, newBitCrusher) - 0usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::freeBitCrusher"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, freeBitCrusher) - 8usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::setAmount"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, setAmount) - 16usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::setAmountModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, setAmountModulator) - 24usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::getAmountModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, getAmountModulator) - 32usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::setUndersampling"]
        [::core::mem::offset_of!(playdate_sound_effect_bitcrusher, setUndersampling) - 40usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::setUndersampleModulator"][::core::mem::offset_of!(
        playdate_sound_effect_bitcrusher,
        setUndersampleModulator
    ) - 48usize];
    ["Offset of field: playdate_sound_effect_bitcrusher::getUndersampleModulator"][::core::mem::offset_of!(
        playdate_sound_effect_bitcrusher,
        getUndersampleModulator
    ) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RingModulator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_ringmodulator {
    pub newRingmod: ::core::option::Option<unsafe extern "C" fn() -> *mut RingModulator>,
    pub freeRingmod: ::core::option::Option<unsafe extern "C" fn(filter: *mut RingModulator)>,
    pub setFrequency:
        ::core::option::Option<unsafe extern "C" fn(filter: *mut RingModulator, frequency: f32)>,
    pub setFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut RingModulator, signal: *mut PDSynthSignalValue),
    >,
    pub getFrequencyModulator: ::core::option::Option<
        unsafe extern "C" fn(filter: *mut RingModulator) -> *mut PDSynthSignalValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_ringmodulator"]
        [::core::mem::size_of::<playdate_sound_effect_ringmodulator>() - 40usize];
    ["Alignment of playdate_sound_effect_ringmodulator"]
        [::core::mem::align_of::<playdate_sound_effect_ringmodulator>() - 8usize];
    ["Offset of field: playdate_sound_effect_ringmodulator::newRingmod"]
        [::core::mem::offset_of!(playdate_sound_effect_ringmodulator, newRingmod) - 0usize];
    ["Offset of field: playdate_sound_effect_ringmodulator::freeRingmod"]
        [::core::mem::offset_of!(playdate_sound_effect_ringmodulator, freeRingmod) - 8usize];
    ["Offset of field: playdate_sound_effect_ringmodulator::setFrequency"]
        [::core::mem::offset_of!(playdate_sound_effect_ringmodulator, setFrequency) - 16usize];
    ["Offset of field: playdate_sound_effect_ringmodulator::setFrequencyModulator"][::core::mem::offset_of!(
        playdate_sound_effect_ringmodulator,
        setFrequencyModulator
    ) - 24usize];
    ["Offset of field: playdate_sound_effect_ringmodulator::getFrequencyModulator"][::core::mem::offset_of!(
        playdate_sound_effect_ringmodulator,
        getFrequencyModulator
    ) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DelayLine {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DelayLineTap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_delayline {
    pub newDelayLine: ::core::option::Option<
        unsafe extern "C" fn(length: ctypes::c_int, stereo: ctypes::c_int) -> *mut DelayLine,
    >,
    pub freeDelayLine: ::core::option::Option<unsafe extern "C" fn(filter: *mut DelayLine)>,
    pub setLength:
        ::core::option::Option<unsafe extern "C" fn(d: *mut DelayLine, frames: ctypes::c_int)>,
    pub setFeedback: ::core::option::Option<unsafe extern "C" fn(d: *mut DelayLine, fb: f32)>,
    pub addTap: ::core::option::Option<
        unsafe extern "C" fn(d: *mut DelayLine, delay: ctypes::c_int) -> *mut DelayLineTap,
    >,
    pub freeTap: ::core::option::Option<unsafe extern "C" fn(tap: *mut DelayLineTap)>,
    pub setTapDelay:
        ::core::option::Option<unsafe extern "C" fn(t: *mut DelayLineTap, frames: ctypes::c_int)>,
    pub setTapDelayModulator: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap, mod_: *mut PDSynthSignalValue),
    >,
    pub getTapDelayModulator: ::core::option::Option<
        unsafe extern "C" fn(t: *mut DelayLineTap) -> *mut PDSynthSignalValue,
    >,
    pub setTapChannelsFlipped:
        ::core::option::Option<unsafe extern "C" fn(t: *mut DelayLineTap, flip: ctypes::c_int)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_delayline"]
        [::core::mem::size_of::<playdate_sound_effect_delayline>() - 80usize];
    ["Alignment of playdate_sound_effect_delayline"]
        [::core::mem::align_of::<playdate_sound_effect_delayline>() - 8usize];
    ["Offset of field: playdate_sound_effect_delayline::newDelayLine"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, newDelayLine) - 0usize];
    ["Offset of field: playdate_sound_effect_delayline::freeDelayLine"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, freeDelayLine) - 8usize];
    ["Offset of field: playdate_sound_effect_delayline::setLength"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, setLength) - 16usize];
    ["Offset of field: playdate_sound_effect_delayline::setFeedback"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, setFeedback) - 24usize];
    ["Offset of field: playdate_sound_effect_delayline::addTap"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, addTap) - 32usize];
    ["Offset of field: playdate_sound_effect_delayline::freeTap"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, freeTap) - 40usize];
    ["Offset of field: playdate_sound_effect_delayline::setTapDelay"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, setTapDelay) - 48usize];
    ["Offset of field: playdate_sound_effect_delayline::setTapDelayModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, setTapDelayModulator) - 56usize];
    ["Offset of field: playdate_sound_effect_delayline::getTapDelayModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, getTapDelayModulator) - 64usize];
    ["Offset of field: playdate_sound_effect_delayline::setTapChannelsFlipped"]
        [::core::mem::offset_of!(playdate_sound_effect_delayline, setTapChannelsFlipped) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Overdrive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect_overdrive {
    pub newOverdrive: ::core::option::Option<unsafe extern "C" fn() -> *mut Overdrive>,
    pub freeOverdrive: ::core::option::Option<unsafe extern "C" fn(filter: *mut Overdrive)>,
    pub setGain: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, gain: f32)>,
    pub setLimit: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, limit: f32)>,
    pub setLimitModulator: ::core::option::Option<
        unsafe extern "C" fn(o: *mut Overdrive, mod_: *mut PDSynthSignalValue),
    >,
    pub getLimitModulator:
        ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive) -> *mut PDSynthSignalValue>,
    pub setOffset: ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive, offset: f32)>,
    pub setOffsetModulator: ::core::option::Option<
        unsafe extern "C" fn(o: *mut Overdrive, mod_: *mut PDSynthSignalValue),
    >,
    pub getOffsetModulator:
        ::core::option::Option<unsafe extern "C" fn(o: *mut Overdrive) -> *mut PDSynthSignalValue>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect_overdrive"]
        [::core::mem::size_of::<playdate_sound_effect_overdrive>() - 72usize];
    ["Alignment of playdate_sound_effect_overdrive"]
        [::core::mem::align_of::<playdate_sound_effect_overdrive>() - 8usize];
    ["Offset of field: playdate_sound_effect_overdrive::newOverdrive"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, newOverdrive) - 0usize];
    ["Offset of field: playdate_sound_effect_overdrive::freeOverdrive"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, freeOverdrive) - 8usize];
    ["Offset of field: playdate_sound_effect_overdrive::setGain"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, setGain) - 16usize];
    ["Offset of field: playdate_sound_effect_overdrive::setLimit"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, setLimit) - 24usize];
    ["Offset of field: playdate_sound_effect_overdrive::setLimitModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, setLimitModulator) - 32usize];
    ["Offset of field: playdate_sound_effect_overdrive::getLimitModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, getLimitModulator) - 40usize];
    ["Offset of field: playdate_sound_effect_overdrive::setOffset"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, setOffset) - 48usize];
    ["Offset of field: playdate_sound_effect_overdrive::setOffsetModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, setOffsetModulator) - 56usize];
    ["Offset of field: playdate_sound_effect_overdrive::getOffsetModulator"]
        [::core::mem::offset_of!(playdate_sound_effect_overdrive, getOffsetModulator) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundEffect {
    _unused: [u8; 0],
}
pub type effectProc = ::core::option::Option<
    unsafe extern "C" fn(
        e: *mut SoundEffect,
        left: *mut i32,
        right: *mut i32,
        nsamples: ctypes::c_int,
        bufactive: ctypes::c_int,
    ) -> ctypes::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_effect {
    pub newEffect: ::core::option::Option<
        unsafe extern "C" fn(proc_: effectProc, userdata: *mut ctypes::c_void) -> *mut SoundEffect,
    >,
    pub freeEffect: ::core::option::Option<unsafe extern "C" fn(effect: *mut SoundEffect)>,
    pub setMix: ::core::option::Option<unsafe extern "C" fn(effect: *mut SoundEffect, level: f32)>,
    pub setMixModulator: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect, signal: *mut PDSynthSignalValue),
    >,
    pub getMixModulator: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect) -> *mut PDSynthSignalValue,
    >,
    pub setUserdata: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect, userdata: *mut ctypes::c_void),
    >,
    pub getUserdata: ::core::option::Option<
        unsafe extern "C" fn(effect: *mut SoundEffect) -> *mut ctypes::c_void,
    >,
    pub twopolefilter: *const playdate_sound_effect_twopolefilter,
    pub onepolefilter: *const playdate_sound_effect_onepolefilter,
    pub bitcrusher: *const playdate_sound_effect_bitcrusher,
    pub ringmodulator: *const playdate_sound_effect_ringmodulator,
    pub delayline: *const playdate_sound_effect_delayline,
    pub overdrive: *const playdate_sound_effect_overdrive,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_effect"][::core::mem::size_of::<playdate_sound_effect>() - 104usize];
    ["Alignment of playdate_sound_effect"]
        [::core::mem::align_of::<playdate_sound_effect>() - 8usize];
    ["Offset of field: playdate_sound_effect::newEffect"]
        [::core::mem::offset_of!(playdate_sound_effect, newEffect) - 0usize];
    ["Offset of field: playdate_sound_effect::freeEffect"]
        [::core::mem::offset_of!(playdate_sound_effect, freeEffect) - 8usize];
    ["Offset of field: playdate_sound_effect::setMix"]
        [::core::mem::offset_of!(playdate_sound_effect, setMix) - 16usize];
    ["Offset of field: playdate_sound_effect::setMixModulator"]
        [::core::mem::offset_of!(playdate_sound_effect, setMixModulator) - 24usize];
    ["Offset of field: playdate_sound_effect::getMixModulator"]
        [::core::mem::offset_of!(playdate_sound_effect, getMixModulator) - 32usize];
    ["Offset of field: playdate_sound_effect::setUserdata"]
        [::core::mem::offset_of!(playdate_sound_effect, setUserdata) - 40usize];
    ["Offset of field: playdate_sound_effect::getUserdata"]
        [::core::mem::offset_of!(playdate_sound_effect, getUserdata) - 48usize];
    ["Offset of field: playdate_sound_effect::twopolefilter"]
        [::core::mem::offset_of!(playdate_sound_effect, twopolefilter) - 56usize];
    ["Offset of field: playdate_sound_effect::onepolefilter"]
        [::core::mem::offset_of!(playdate_sound_effect, onepolefilter) - 64usize];
    ["Offset of field: playdate_sound_effect::bitcrusher"]
        [::core::mem::offset_of!(playdate_sound_effect, bitcrusher) - 72usize];
    ["Offset of field: playdate_sound_effect::ringmodulator"]
        [::core::mem::offset_of!(playdate_sound_effect, ringmodulator) - 80usize];
    ["Offset of field: playdate_sound_effect::delayline"]
        [::core::mem::offset_of!(playdate_sound_effect, delayline) - 88usize];
    ["Offset of field: playdate_sound_effect::overdrive"]
        [::core::mem::offset_of!(playdate_sound_effect, overdrive) - 96usize];
};
impl Default for playdate_sound_effect {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SoundChannel {
    _unused: [u8; 0],
}
pub type AudioSourceFunction = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut ctypes::c_void,
        left: *mut i16,
        right: *mut i16,
        len: ctypes::c_int,
    ) -> ctypes::c_int,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound_channel {
    pub newChannel: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundChannel>,
    pub freeChannel: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel)>,
    pub addSource: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, source: *mut SoundSource) -> ctypes::c_int,
    >,
    pub removeSource: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, source: *mut SoundSource) -> ctypes::c_int,
    >,
    pub addCallbackSource: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut SoundChannel,
            callback: AudioSourceFunction,
            context: *mut ctypes::c_void,
            stereo: ctypes::c_int,
        ) -> *mut SoundSource,
    >,
    pub addEffect: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, effect: *mut SoundEffect),
    >,
    pub removeEffect: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, effect: *mut SoundEffect),
    >,
    pub setVolume:
        ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel, volume: f32)>,
    pub getVolume: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel) -> f32>,
    pub setVolumeModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, mod_: *mut PDSynthSignalValue),
    >,
    pub getVolumeModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub setPan: ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel, pan: f32)>,
    pub setPanModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel, mod_: *mut PDSynthSignalValue),
    >,
    pub getPanModulator: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub getDryLevelSignal: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
    pub getWetLevelSignal: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut SoundChannel) -> *mut PDSynthSignalValue,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound_channel"][::core::mem::size_of::<playdate_sound_channel>() - 128usize];
    ["Alignment of playdate_sound_channel"]
        [::core::mem::align_of::<playdate_sound_channel>() - 8usize];
    ["Offset of field: playdate_sound_channel::newChannel"]
        [::core::mem::offset_of!(playdate_sound_channel, newChannel) - 0usize];
    ["Offset of field: playdate_sound_channel::freeChannel"]
        [::core::mem::offset_of!(playdate_sound_channel, freeChannel) - 8usize];
    ["Offset of field: playdate_sound_channel::addSource"]
        [::core::mem::offset_of!(playdate_sound_channel, addSource) - 16usize];
    ["Offset of field: playdate_sound_channel::removeSource"]
        [::core::mem::offset_of!(playdate_sound_channel, removeSource) - 24usize];
    ["Offset of field: playdate_sound_channel::addCallbackSource"]
        [::core::mem::offset_of!(playdate_sound_channel, addCallbackSource) - 32usize];
    ["Offset of field: playdate_sound_channel::addEffect"]
        [::core::mem::offset_of!(playdate_sound_channel, addEffect) - 40usize];
    ["Offset of field: playdate_sound_channel::removeEffect"]
        [::core::mem::offset_of!(playdate_sound_channel, removeEffect) - 48usize];
    ["Offset of field: playdate_sound_channel::setVolume"]
        [::core::mem::offset_of!(playdate_sound_channel, setVolume) - 56usize];
    ["Offset of field: playdate_sound_channel::getVolume"]
        [::core::mem::offset_of!(playdate_sound_channel, getVolume) - 64usize];
    ["Offset of field: playdate_sound_channel::setVolumeModulator"]
        [::core::mem::offset_of!(playdate_sound_channel, setVolumeModulator) - 72usize];
    ["Offset of field: playdate_sound_channel::getVolumeModulator"]
        [::core::mem::offset_of!(playdate_sound_channel, getVolumeModulator) - 80usize];
    ["Offset of field: playdate_sound_channel::setPan"]
        [::core::mem::offset_of!(playdate_sound_channel, setPan) - 88usize];
    ["Offset of field: playdate_sound_channel::setPanModulator"]
        [::core::mem::offset_of!(playdate_sound_channel, setPanModulator) - 96usize];
    ["Offset of field: playdate_sound_channel::getPanModulator"]
        [::core::mem::offset_of!(playdate_sound_channel, getPanModulator) - 104usize];
    ["Offset of field: playdate_sound_channel::getDryLevelSignal"]
        [::core::mem::offset_of!(playdate_sound_channel, getDryLevelSignal) - 112usize];
    ["Offset of field: playdate_sound_channel::getWetLevelSignal"]
        [::core::mem::offset_of!(playdate_sound_channel, getWetLevelSignal) - 120usize];
};
pub type RecordCallback = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut ctypes::c_void,
        buffer: *mut i16,
        length: ctypes::c_int,
    ) -> ctypes::c_int,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum MicSource {
    kMicInputAutodetect = 0,
    kMicInputInternal = 1,
    kMicInputHeadset = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct playdate_sound {
    pub channel: *const playdate_sound_channel,
    pub fileplayer: *const playdate_sound_fileplayer,
    pub sample: *const playdate_sound_sample,
    pub sampleplayer: *const playdate_sound_sampleplayer,
    pub synth: *const playdate_sound_synth,
    pub sequence: *const playdate_sound_sequence,
    pub effect: *const playdate_sound_effect,
    pub lfo: *const playdate_sound_lfo,
    pub envelope: *const playdate_sound_envelope,
    pub source: *const playdate_sound_source,
    pub controlsignal: *const playdate_control_signal,
    pub track: *const playdate_sound_track,
    pub instrument: *const playdate_sound_instrument,
    pub getCurrentTime: ::core::option::Option<unsafe extern "C" fn() -> u32>,
    pub addSource: ::core::option::Option<
        unsafe extern "C" fn(
            callback: AudioSourceFunction,
            context: *mut ctypes::c_void,
            stereo: ctypes::c_int,
        ) -> *mut SoundSource,
    >,
    pub getDefaultChannel: ::core::option::Option<unsafe extern "C" fn() -> *mut SoundChannel>,
    pub addChannel:
        ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel) -> ctypes::c_int>,
    pub removeChannel:
        ::core::option::Option<unsafe extern "C" fn(channel: *mut SoundChannel) -> ctypes::c_int>,
    pub setMicCallback: ::core::option::Option<
        unsafe extern "C" fn(
            callback: RecordCallback,
            context: *mut ctypes::c_void,
            source: MicSource,
        ) -> ctypes::c_int,
    >,
    pub getHeadphoneState: ::core::option::Option<
        unsafe extern "C" fn(
            headphone: *mut ctypes::c_int,
            headsetmic: *mut ctypes::c_int,
            changeCallback: ::core::option::Option<
                unsafe extern "C" fn(headphone: ctypes::c_int, mic: ctypes::c_int),
            >,
        ),
    >,
    pub setOutputsActive: ::core::option::Option<
        unsafe extern "C" fn(headphone: ctypes::c_int, speaker: ctypes::c_int),
    >,
    pub removeSource:
        ::core::option::Option<unsafe extern "C" fn(source: *mut SoundSource) -> ctypes::c_int>,
    pub signal: *const playdate_sound_signal,
    pub getError: ::core::option::Option<unsafe extern "C" fn() -> *const ctypes::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_sound"][::core::mem::size_of::<playdate_sound>() - 192usize];
    ["Alignment of playdate_sound"][::core::mem::align_of::<playdate_sound>() - 8usize];
    ["Offset of field: playdate_sound::channel"]
        [::core::mem::offset_of!(playdate_sound, channel) - 0usize];
    ["Offset of field: playdate_sound::fileplayer"]
        [::core::mem::offset_of!(playdate_sound, fileplayer) - 8usize];
    ["Offset of field: playdate_sound::sample"]
        [::core::mem::offset_of!(playdate_sound, sample) - 16usize];
    ["Offset of field: playdate_sound::sampleplayer"]
        [::core::mem::offset_of!(playdate_sound, sampleplayer) - 24usize];
    ["Offset of field: playdate_sound::synth"]
        [::core::mem::offset_of!(playdate_sound, synth) - 32usize];
    ["Offset of field: playdate_sound::sequence"]
        [::core::mem::offset_of!(playdate_sound, sequence) - 40usize];
    ["Offset of field: playdate_sound::effect"]
        [::core::mem::offset_of!(playdate_sound, effect) - 48usize];
    ["Offset of field: playdate_sound::lfo"]
        [::core::mem::offset_of!(playdate_sound, lfo) - 56usize];
    ["Offset of field: playdate_sound::envelope"]
        [::core::mem::offset_of!(playdate_sound, envelope) - 64usize];
    ["Offset of field: playdate_sound::source"]
        [::core::mem::offset_of!(playdate_sound, source) - 72usize];
    ["Offset of field: playdate_sound::controlsignal"]
        [::core::mem::offset_of!(playdate_sound, controlsignal) - 80usize];
    ["Offset of field: playdate_sound::track"]
        [::core::mem::offset_of!(playdate_sound, track) - 88usize];
    ["Offset of field: playdate_sound::instrument"]
        [::core::mem::offset_of!(playdate_sound, instrument) - 96usize];
    ["Offset of field: playdate_sound::getCurrentTime"]
        [::core::mem::offset_of!(playdate_sound, getCurrentTime) - 104usize];
    ["Offset of field: playdate_sound::addSource"]
        [::core::mem::offset_of!(playdate_sound, addSource) - 112usize];
    ["Offset of field: playdate_sound::getDefaultChannel"]
        [::core::mem::offset_of!(playdate_sound, getDefaultChannel) - 120usize];
    ["Offset of field: playdate_sound::addChannel"]
        [::core::mem::offset_of!(playdate_sound, addChannel) - 128usize];
    ["Offset of field: playdate_sound::removeChannel"]
        [::core::mem::offset_of!(playdate_sound, removeChannel) - 136usize];
    ["Offset of field: playdate_sound::setMicCallback"]
        [::core::mem::offset_of!(playdate_sound, setMicCallback) - 144usize];
    ["Offset of field: playdate_sound::getHeadphoneState"]
        [::core::mem::offset_of!(playdate_sound, getHeadphoneState) - 152usize];
    ["Offset of field: playdate_sound::setOutputsActive"]
        [::core::mem::offset_of!(playdate_sound, setOutputsActive) - 160usize];
    ["Offset of field: playdate_sound::removeSource"]
        [::core::mem::offset_of!(playdate_sound, removeSource) - 168usize];
    ["Offset of field: playdate_sound::signal"]
        [::core::mem::offset_of!(playdate_sound, signal) - 176usize];
    ["Offset of field: playdate_sound::getError"]
        [::core::mem::offset_of!(playdate_sound, getError) - 184usize];
};
impl Default for playdate_sound {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_display {
    pub getWidth: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub getHeight: ::core::option::Option<unsafe extern "C" fn() -> ctypes::c_int>,
    pub setRefreshRate: ::core::option::Option<unsafe extern "C" fn(rate: f32)>,
    pub setInverted: ::core::option::Option<unsafe extern "C" fn(flag: ctypes::c_int)>,
    pub setScale: ::core::option::Option<unsafe extern "C" fn(s: ctypes::c_uint)>,
    pub setMosaic:
        ::core::option::Option<unsafe extern "C" fn(x: ctypes::c_uint, y: ctypes::c_uint)>,
    pub setFlipped:
        ::core::option::Option<unsafe extern "C" fn(x: ctypes::c_int, y: ctypes::c_int)>,
    pub setOffset: ::core::option::Option<unsafe extern "C" fn(x: ctypes::c_int, y: ctypes::c_int)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_display"][::core::mem::size_of::<playdate_display>() - 64usize];
    ["Alignment of playdate_display"][::core::mem::align_of::<playdate_display>() - 8usize];
    ["Offset of field: playdate_display::getWidth"]
        [::core::mem::offset_of!(playdate_display, getWidth) - 0usize];
    ["Offset of field: playdate_display::getHeight"]
        [::core::mem::offset_of!(playdate_display, getHeight) - 8usize];
    ["Offset of field: playdate_display::setRefreshRate"]
        [::core::mem::offset_of!(playdate_display, setRefreshRate) - 16usize];
    ["Offset of field: playdate_display::setInverted"]
        [::core::mem::offset_of!(playdate_display, setInverted) - 24usize];
    ["Offset of field: playdate_display::setScale"]
        [::core::mem::offset_of!(playdate_display, setScale) - 32usize];
    ["Offset of field: playdate_display::setMosaic"]
        [::core::mem::offset_of!(playdate_display, setMosaic) - 40usize];
    ["Offset of field: playdate_display::setFlipped"]
        [::core::mem::offset_of!(playdate_display, setFlipped) - 48usize];
    ["Offset of field: playdate_display::setOffset"]
        [::core::mem::offset_of!(playdate_display, setOffset) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PDScore {
    pub rank: u32,
    pub value: u32,
    pub player: *mut ctypes::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDScore"][::core::mem::size_of::<PDScore>() - 16usize];
    ["Alignment of PDScore"][::core::mem::align_of::<PDScore>() - 8usize];
    ["Offset of field: PDScore::rank"][::core::mem::offset_of!(PDScore, rank) - 0usize];
    ["Offset of field: PDScore::value"][::core::mem::offset_of!(PDScore, value) - 4usize];
    ["Offset of field: PDScore::player"][::core::mem::offset_of!(PDScore, player) - 8usize];
};
impl Default for PDScore {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PDScoresList {
    pub boardID: *mut ctypes::c_char,
    pub count: ctypes::c_uint,
    pub lastUpdated: u32,
    pub playerIncluded: ctypes::c_int,
    pub limit: ctypes::c_uint,
    pub scores: *mut PDScore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDScoresList"][::core::mem::size_of::<PDScoresList>() - 32usize];
    ["Alignment of PDScoresList"][::core::mem::align_of::<PDScoresList>() - 8usize];
    ["Offset of field: PDScoresList::boardID"]
        [::core::mem::offset_of!(PDScoresList, boardID) - 0usize];
    ["Offset of field: PDScoresList::count"][::core::mem::offset_of!(PDScoresList, count) - 8usize];
    ["Offset of field: PDScoresList::lastUpdated"]
        [::core::mem::offset_of!(PDScoresList, lastUpdated) - 12usize];
    ["Offset of field: PDScoresList::playerIncluded"]
        [::core::mem::offset_of!(PDScoresList, playerIncluded) - 16usize];
    ["Offset of field: PDScoresList::limit"]
        [::core::mem::offset_of!(PDScoresList, limit) - 20usize];
    ["Offset of field: PDScoresList::scores"]
        [::core::mem::offset_of!(PDScoresList, scores) - 24usize];
};
impl Default for PDScoresList {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PDBoard {
    pub boardID: *mut ctypes::c_char,
    pub name: *mut ctypes::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDBoard"][::core::mem::size_of::<PDBoard>() - 16usize];
    ["Alignment of PDBoard"][::core::mem::align_of::<PDBoard>() - 8usize];
    ["Offset of field: PDBoard::boardID"][::core::mem::offset_of!(PDBoard, boardID) - 0usize];
    ["Offset of field: PDBoard::name"][::core::mem::offset_of!(PDBoard, name) - 8usize];
};
impl Default for PDBoard {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PDBoardsList {
    pub count: ctypes::c_uint,
    pub lastUpdated: u32,
    pub boards: *mut PDBoard,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PDBoardsList"][::core::mem::size_of::<PDBoardsList>() - 16usize];
    ["Alignment of PDBoardsList"][::core::mem::align_of::<PDBoardsList>() - 8usize];
    ["Offset of field: PDBoardsList::count"][::core::mem::offset_of!(PDBoardsList, count) - 0usize];
    ["Offset of field: PDBoardsList::lastUpdated"]
        [::core::mem::offset_of!(PDBoardsList, lastUpdated) - 4usize];
    ["Offset of field: PDBoardsList::boards"]
        [::core::mem::offset_of!(PDBoardsList, boards) - 8usize];
};
impl Default for PDBoardsList {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type AddScoreCallback = ::core::option::Option<
    unsafe extern "C" fn(score: *mut PDScore, errorMessage: *const ctypes::c_char),
>;
pub type PersonalBestCallback = ::core::option::Option<
    unsafe extern "C" fn(score: *mut PDScore, errorMessage: *const ctypes::c_char),
>;
pub type BoardsListCallback = ::core::option::Option<
    unsafe extern "C" fn(boards: *mut PDBoardsList, errorMessage: *const ctypes::c_char),
>;
pub type ScoresCallback = ::core::option::Option<
    unsafe extern "C" fn(scores: *mut PDScoresList, errorMessage: *const ctypes::c_char),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct playdate_scoreboards {
    pub addScore: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ctypes::c_char,
            value: u32,
            callback: AddScoreCallback,
        ) -> ctypes::c_int,
    >,
    pub getPersonalBest: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ctypes::c_char,
            callback: PersonalBestCallback,
        ) -> ctypes::c_int,
    >,
    pub freeScore: ::core::option::Option<unsafe extern "C" fn(score: *mut PDScore)>,
    pub getScoreboards:
        ::core::option::Option<unsafe extern "C" fn(callback: BoardsListCallback) -> ctypes::c_int>,
    pub freeBoardsList: ::core::option::Option<unsafe extern "C" fn(boardsList: *mut PDBoardsList)>,
    pub getScores: ::core::option::Option<
        unsafe extern "C" fn(
            boardId: *const ctypes::c_char,
            callback: ScoresCallback,
        ) -> ctypes::c_int,
    >,
    pub freeScoresList: ::core::option::Option<unsafe extern "C" fn(scoresList: *mut PDScoresList)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of playdate_scoreboards"][::core::mem::size_of::<playdate_scoreboards>() - 56usize];
    ["Alignment of playdate_scoreboards"][::core::mem::align_of::<playdate_scoreboards>() - 8usize];
    ["Offset of field: playdate_scoreboards::addScore"]
        [::core::mem::offset_of!(playdate_scoreboards, addScore) - 0usize];
    ["Offset of field: playdate_scoreboards::getPersonalBest"]
        [::core::mem::offset_of!(playdate_scoreboards, getPersonalBest) - 8usize];
    ["Offset of field: playdate_scoreboards::freeScore"]
        [::core::mem::offset_of!(playdate_scoreboards, freeScore) - 16usize];
    ["Offset of field: playdate_scoreboards::getScoreboards"]
        [::core::mem::offset_of!(playdate_scoreboards, getScoreboards) - 24usize];
    ["Offset of field: playdate_scoreboards::freeBoardsList"]
        [::core::mem::offset_of!(playdate_scoreboards, freeBoardsList) - 32usize];
    ["Offset of field: playdate_scoreboards::getScores"]
        [::core::mem::offset_of!(playdate_scoreboards, getScores) - 40usize];
    ["Offset of field: playdate_scoreboards::freeScoresList"]
        [::core::mem::offset_of!(playdate_scoreboards, freeScoresList) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct PlaydateAPI {
    pub system: *const playdate_sys,
    pub file: *const playdate_file,
    pub graphics: *const playdate_graphics,
    pub sprite: *const playdate_sprite,
    pub display: *const playdate_display,
    pub sound: *const playdate_sound,
    pub lua: *const playdate_lua,
    pub json: *const playdate_json,
    pub scoreboards: *const playdate_scoreboards,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlaydateAPI"][::core::mem::size_of::<PlaydateAPI>() - 72usize];
    ["Alignment of PlaydateAPI"][::core::mem::align_of::<PlaydateAPI>() - 8usize];
    ["Offset of field: PlaydateAPI::system"][::core::mem::offset_of!(PlaydateAPI, system) - 0usize];
    ["Offset of field: PlaydateAPI::file"][::core::mem::offset_of!(PlaydateAPI, file) - 8usize];
    ["Offset of field: PlaydateAPI::graphics"]
        [::core::mem::offset_of!(PlaydateAPI, graphics) - 16usize];
    ["Offset of field: PlaydateAPI::sprite"]
        [::core::mem::offset_of!(PlaydateAPI, sprite) - 24usize];
    ["Offset of field: PlaydateAPI::display"]
        [::core::mem::offset_of!(PlaydateAPI, display) - 32usize];
    ["Offset of field: PlaydateAPI::sound"][::core::mem::offset_of!(PlaydateAPI, sound) - 40usize];
    ["Offset of field: PlaydateAPI::lua"][::core::mem::offset_of!(PlaydateAPI, lua) - 48usize];
    ["Offset of field: PlaydateAPI::json"][::core::mem::offset_of!(PlaydateAPI, json) - 56usize];
    ["Offset of field: PlaydateAPI::scoreboards"]
        [::core::mem::offset_of!(PlaydateAPI, scoreboards) - 64usize];
};
impl Default for PlaydateAPI {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PDSystemEvent {
    kEventInit = 0,
    kEventInitLua = 1,
    kEventLock = 2,
    kEventUnlock = 3,
    kEventPause = 4,
    kEventResume = 5,
    kEventTerminate = 6,
    kEventKeyPressed = 7,
    kEventKeyReleased = 8,
    kEventLowPower = 9,
}
